
LED_MATRIX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fbc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002078  08002078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020f0  080020f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080020f0  080020f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020f0  080020f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020f0  080020f0  000120f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020f4  080020f4  000120f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080020f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000000c  08002104  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08002104  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006fd5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018cc  00000000  00000000  00027009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  000288d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  000290c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4f6  00000000  00000000  000297d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009082  00000000  00000000  00043cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8c9e  00000000  00000000  0004cd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f59e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a64  00000000  00000000  000f5a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002060 	.word	0x08002060

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002060 	.word	0x08002060

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <DigiLedInit>:
uint8_t SpiSendFrame[LEDSTARTFRAMESIZE + 4 * LEDFRAMESIZE + LEDENDFRAMESIZE];
uint8_t frameModified; 		// when frame is changed the stimuli is set high

DigitalLedframe digitalLedframe[LEDFRAMESIZE];
/* functions */
void DigiLedInit() {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
	frameModified = TRUE; // Initial set to true to force update after initialization of frame buffer
 8000222:	4b1e      	ldr	r3, [pc, #120]	; (800029c <DigiLedInit+0x80>)
 8000224:	2201      	movs	r2, #1
 8000226:	701a      	strb	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	for (int led = 1; led <= LEDFRAMESIZE; led++) {
 8000228:	2301      	movs	r3, #1
 800022a:	607b      	str	r3, [r7, #4]
 800022c:	e02b      	b.n	8000286 <DigiLedInit+0x6a>
		digitalLedframe[led - 1].FieldsIn.INIT = 0x07; // Set MSB first 3 bits to identify start of LED packet
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3b01      	subs	r3, #1
 8000232:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <DigiLedInit+0x84>)
 8000234:	009b      	lsls	r3, r3, #2
 8000236:	18d3      	adds	r3, r2, r3
 8000238:	78da      	ldrb	r2, [r3, #3]
 800023a:	2120      	movs	r1, #32
 800023c:	4249      	negs	r1, r1
 800023e:	430a      	orrs	r2, r1
 8000240:	70da      	strb	r2, [r3, #3]
		digitalLedframe[led - 1].FieldsIn.GLOBAL = 0x00; // Switch off LED global
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	3b01      	subs	r3, #1
 8000246:	4a16      	ldr	r2, [pc, #88]	; (80002a0 <DigiLedInit+0x84>)
 8000248:	009b      	lsls	r3, r3, #2
 800024a:	18d3      	adds	r3, r2, r3
 800024c:	78da      	ldrb	r2, [r3, #3]
 800024e:	211f      	movs	r1, #31
 8000250:	438a      	bics	r2, r1
 8000252:	70da      	strb	r2, [r3, #3]
		digitalLedframe[led - 1].FieldsIn.BLUE = 0x00;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3b01      	subs	r3, #1
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <DigiLedInit+0x84>)
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	18d3      	adds	r3, r2, r3
 800025e:	3302      	adds	r3, #2
 8000260:	2200      	movs	r2, #0
 8000262:	701a      	strb	r2, [r3, #0]
		digitalLedframe[led - 1].FieldsIn.GREEN = 0x00;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3b01      	subs	r3, #1
 8000268:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <DigiLedInit+0x84>)
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	18d3      	adds	r3, r2, r3
 800026e:	3301      	adds	r3, #1
 8000270:	2200      	movs	r2, #0
 8000272:	701a      	strb	r2, [r3, #0]
		digitalLedframe[led - 1].FieldsIn.RED = 0x00;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	1e5a      	subs	r2, r3, #1
 8000278:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <DigiLedInit+0x84>)
 800027a:	0092      	lsls	r2, r2, #2
 800027c:	2100      	movs	r1, #0
 800027e:	54d1      	strb	r1, [r2, r3]
	for (int led = 1; led <= LEDFRAMESIZE; led++) {
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3301      	adds	r3, #1
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2b40      	cmp	r3, #64	; 0x40
 800028a:	ddd0      	ble.n	800022e <DigiLedInit+0x12>
	}
	DigiLedUpdate(FALSE); // Update frame buffer using the value of frameModified as set in initialiser.
 800028c:	2000      	movs	r0, #0
 800028e:	f000 f8d1 	bl	8000434 <DigiLedUpdate>
}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	46bd      	mov	sp, r7
 8000296:	b002      	add	sp, #8
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	20000130 	.word	0x20000130
 80002a0:	20000134 	.word	0x20000134

080002a4 <DigiLedSwitchColors>:
/*-----------------------------------------------------------*/
/**
 * Set color from a predefined color list in "APA102_LedMatrix.h" in enum BasicColors
 */
uint32_t DigiLedSwitchColors(uint8_t Color) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	0002      	movs	r2, r0
 80002ac:	1dfb      	adds	r3, r7, #7
 80002ae:	701a      	strb	r2, [r3, #0]
	uint32_t rgb;
	switch (Color) {
 80002b0:	1dfb      	adds	r3, r7, #7
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b0d      	cmp	r3, #13
 80002b6:	d82d      	bhi.n	8000314 <DigiLedSwitchColors+0x70>
 80002b8:	009a      	lsls	r2, r3, #2
 80002ba:	4b19      	ldr	r3, [pc, #100]	; (8000320 <DigiLedSwitchColors+0x7c>)
 80002bc:	18d3      	adds	r3, r2, r3
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	469f      	mov	pc, r3
	case BLACK:
		rgb = 0x000000;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60fb      	str	r3, [r7, #12]
		break;
 80002c6:	e026      	b.n	8000316 <DigiLedSwitchColors+0x72>
	case WHITE:
		rgb = 0xFFFFFF;
 80002c8:	4b16      	ldr	r3, [pc, #88]	; (8000324 <DigiLedSwitchColors+0x80>)
 80002ca:	60fb      	str	r3, [r7, #12]
		break;
 80002cc:	e023      	b.n	8000316 <DigiLedSwitchColors+0x72>
	case RED:
		rgb = 0xFF0000;
 80002ce:	23ff      	movs	r3, #255	; 0xff
 80002d0:	041b      	lsls	r3, r3, #16
 80002d2:	60fb      	str	r3, [r7, #12]
		break;
 80002d4:	e01f      	b.n	8000316 <DigiLedSwitchColors+0x72>
	case BLUE:
		rgb = 0x0000FF;
 80002d6:	23ff      	movs	r3, #255	; 0xff
 80002d8:	60fb      	str	r3, [r7, #12]
		break;
 80002da:	e01c      	b.n	8000316 <DigiLedSwitchColors+0x72>
	case YELLOW:
		rgb = 0xFFFF00;
 80002dc:	4b12      	ldr	r3, [pc, #72]	; (8000328 <DigiLedSwitchColors+0x84>)
 80002de:	60fb      	str	r3, [r7, #12]
		break;
 80002e0:	e019      	b.n	8000316 <DigiLedSwitchColors+0x72>
	case CYAN:
		rgb = 0x00FFFF;
 80002e2:	4b12      	ldr	r3, [pc, #72]	; (800032c <DigiLedSwitchColors+0x88>)
 80002e4:	60fb      	str	r3, [r7, #12]
		break;
 80002e6:	e016      	b.n	8000316 <DigiLedSwitchColors+0x72>
	case MAGENTA:
		rgb = 0xFF00FF;
 80002e8:	4b11      	ldr	r3, [pc, #68]	; (8000330 <DigiLedSwitchColors+0x8c>)
 80002ea:	60fb      	str	r3, [r7, #12]
		break;
 80002ec:	e013      	b.n	8000316 <DigiLedSwitchColors+0x72>
	case GREEN:
		rgb = 0x00FF00;
 80002ee:	23ff      	movs	r3, #255	; 0xff
 80002f0:	021b      	lsls	r3, r3, #8
 80002f2:	60fb      	str	r3, [r7, #12]
		break;
 80002f4:	e00f      	b.n	8000316 <DigiLedSwitchColors+0x72>
	case AQUA:
		rgb = 0x00FFFF;
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <DigiLedSwitchColors+0x88>)
 80002f8:	60fb      	str	r3, [r7, #12]
		break;
 80002fa:	e00c      	b.n	8000316 <DigiLedSwitchColors+0x72>
	case PURPLE:
		rgb = 0x800080;
 80002fc:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <DigiLedSwitchColors+0x90>)
 80002fe:	60fb      	str	r3, [r7, #12]
		break;
 8000300:	e009      	b.n	8000316 <DigiLedSwitchColors+0x72>
	case LIGHTBLUE:
		rgb = 0xadd8e6;
 8000302:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <DigiLedSwitchColors+0x94>)
 8000304:	60fb      	str	r3, [r7, #12]
		break;
 8000306:	e006      	b.n	8000316 <DigiLedSwitchColors+0x72>
	case ORANGE:
		rgb = 0xFFA500;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <DigiLedSwitchColors+0x98>)
 800030a:	60fb      	str	r3, [r7, #12]
		break;
 800030c:	e003      	b.n	8000316 <DigiLedSwitchColors+0x72>
	case INDIGO:
		rgb = 0x4b0082;
 800030e:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <DigiLedSwitchColors+0x9c>)
 8000310:	60fb      	str	r3, [r7, #12]
		break;
 8000312:	e000      	b.n	8000316 <DigiLedSwitchColors+0x72>
	default:
		break;
 8000314:	46c0      	nop			; (mov r8, r8)
	}
	return rgb;
 8000316:	68fb      	ldr	r3, [r7, #12]
}
 8000318:	0018      	movs	r0, r3
 800031a:	46bd      	mov	sp, r7
 800031c:	b004      	add	sp, #16
 800031e:	bd80      	pop	{r7, pc}
 8000320:	08002078 	.word	0x08002078
 8000324:	00ffffff 	.word	0x00ffffff
 8000328:	00ffff00 	.word	0x00ffff00
 800032c:	0000ffff 	.word	0x0000ffff
 8000330:	00ff00ff 	.word	0x00ff00ff
 8000334:	00800080 	.word	0x00800080
 8000338:	00add8e6 	.word	0x00add8e6
 800033c:	00ffa500 	.word	0x00ffa500
 8000340:	004b0082 	.word	0x004b0082

08000344 <DigiLedSetColor>:
 * Set the colors of a single led using single colors
 * @param led position of the led in the string led>=1
 * Set LED color from a predefined color list in "APA102_LedMatrix.h"
 * @param intensity is a value from 0 to 31. 0 means no light, and 31 maximum intensity
 */
void DigiLedSetColor(uint8_t led, uint8_t color, uint8_t intensity) {
 8000344:	b590      	push	{r4, r7, lr}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	0004      	movs	r4, r0
 800034c:	0008      	movs	r0, r1
 800034e:	0011      	movs	r1, r2
 8000350:	1dfb      	adds	r3, r7, #7
 8000352:	1c22      	adds	r2, r4, #0
 8000354:	701a      	strb	r2, [r3, #0]
 8000356:	1dbb      	adds	r3, r7, #6
 8000358:	1c02      	adds	r2, r0, #0
 800035a:	701a      	strb	r2, [r3, #0]
 800035c:	1d7b      	adds	r3, r7, #5
 800035e:	1c0a      	adds	r2, r1, #0
 8000360:	701a      	strb	r2, [r3, #0]
	uint32_t rgb = 0x000000;
 8000362:	2300      	movs	r3, #0
 8000364:	60fb      	str	r3, [r7, #12]
	rgb = DigiLedSwitchColors(color);
 8000366:	1dbb      	adds	r3, r7, #6
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	0018      	movs	r0, r3
 800036c:	f7ff ff9a 	bl	80002a4 <DigiLedSwitchColors>
 8000370:	0003      	movs	r3, r0
 8000372:	60fb      	str	r3, [r7, #12]
	if (led < 1) {
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d102      	bne.n	8000382 <DigiLedSetColor+0x3e>
		led = 1;
 800037c:	1dfb      	adds	r3, r7, #7
 800037e:	2201      	movs	r2, #1
 8000380:	701a      	strb	r2, [r3, #0]
	}
	if (DigiLedTestPosition(led) == RANGEOK) {
 8000382:	1dfb      	adds	r3, r7, #7
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	0018      	movs	r0, r3
 8000388:	f000 f8ca 	bl	8000520 <DigiLedTestPosition>
 800038c:	1e03      	subs	r3, r0, #0
 800038e:	d149      	bne.n	8000424 <DigiLedSetColor+0xe0>
		if (intensity > INTINSITYLED) {
 8000390:	1d7b      	adds	r3, r7, #5
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b1f      	cmp	r3, #31
 8000396:	d902      	bls.n	800039e <DigiLedSetColor+0x5a>
			intensity = INTINSITYLED;
 8000398:	1d7b      	adds	r3, r7, #5
 800039a:	221f      	movs	r2, #31
 800039c:	701a      	strb	r2, [r3, #0]
		}
		digitalLedframe[led - 1].FieldsIn.INIT = 0x7;
 800039e:	1dfb      	adds	r3, r7, #7
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	4a21      	ldr	r2, [pc, #132]	; (800042c <DigiLedSetColor+0xe8>)
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	18d3      	adds	r3, r2, r3
 80003aa:	78da      	ldrb	r2, [r3, #3]
 80003ac:	2120      	movs	r1, #32
 80003ae:	4249      	negs	r1, r1
 80003b0:	430a      	orrs	r2, r1
 80003b2:	70da      	strb	r2, [r3, #3]
		digitalLedframe[led - 1].FieldsIn.GLOBAL = intensity; // Set led at maximum intensity 0x1F=31
 80003b4:	1dfb      	adds	r3, r7, #7
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	3b01      	subs	r3, #1
 80003ba:	1d7a      	adds	r2, r7, #5
 80003bc:	7812      	ldrb	r2, [r2, #0]
 80003be:	211f      	movs	r1, #31
 80003c0:	400a      	ands	r2, r1
 80003c2:	b2d2      	uxtb	r2, r2
 80003c4:	4919      	ldr	r1, [pc, #100]	; (800042c <DigiLedSetColor+0xe8>)
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	18cb      	adds	r3, r1, r3
 80003ca:	211f      	movs	r1, #31
 80003cc:	400a      	ands	r2, r1
 80003ce:	0010      	movs	r0, r2
 80003d0:	78da      	ldrb	r2, [r3, #3]
 80003d2:	211f      	movs	r1, #31
 80003d4:	438a      	bics	r2, r1
 80003d6:	1c11      	adds	r1, r2, #0
 80003d8:	1c02      	adds	r2, r0, #0
 80003da:	430a      	orrs	r2, r1
 80003dc:	70da      	strb	r2, [r3, #3]
		digitalLedframe[led - 1].FieldsIn.BLUE = (uint8_t) (rgb);
 80003de:	1dfb      	adds	r3, r7, #7
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	68fa      	ldr	r2, [r7, #12]
 80003e6:	b2d1      	uxtb	r1, r2
 80003e8:	4a10      	ldr	r2, [pc, #64]	; (800042c <DigiLedSetColor+0xe8>)
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	18d3      	adds	r3, r2, r3
 80003ee:	3302      	adds	r3, #2
 80003f0:	1c0a      	adds	r2, r1, #0
 80003f2:	701a      	strb	r2, [r3, #0]
		digitalLedframe[led - 1].FieldsIn.GREEN = (uint8_t) (rgb >> 8);
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	0a1a      	lsrs	r2, r3, #8
 80003f8:	1dfb      	adds	r3, r7, #7
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	b2d1      	uxtb	r1, r2
 8000400:	4a0a      	ldr	r2, [pc, #40]	; (800042c <DigiLedSetColor+0xe8>)
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	18d3      	adds	r3, r2, r3
 8000406:	3301      	adds	r3, #1
 8000408:	1c0a      	adds	r2, r1, #0
 800040a:	701a      	strb	r2, [r3, #0]
		digitalLedframe[led - 1].FieldsIn.RED = (uint8_t) (rgb >> 16);
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	0c19      	lsrs	r1, r3, #16
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	1e5a      	subs	r2, r3, #1
 8000416:	b2c9      	uxtb	r1, r1
 8000418:	4b04      	ldr	r3, [pc, #16]	; (800042c <DigiLedSetColor+0xe8>)
 800041a:	0092      	lsls	r2, r2, #2
 800041c:	54d1      	strb	r1, [r2, r3]
		frameModified = TRUE;
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <DigiLedSetColor+0xec>)
 8000420:	2201      	movs	r2, #1
 8000422:	701a      	strb	r2, [r3, #0]
	}
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b005      	add	sp, #20
 800042a:	bd90      	pop	{r4, r7, pc}
 800042c:	20000134 	.word	0x20000134
 8000430:	20000130 	.word	0x20000130

08000434 <DigiLedUpdate>:
/*-----------------------------------------------------------*/
/**
 * @brief update led string
 * @param set true to force update leds and false to update only when frame is modified
 */
void DigiLedUpdate(uint8_t forceUpdate) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	0002      	movs	r2, r0
 800043c:	1dfb      	adds	r3, r7, #7
 800043e:	701a      	strb	r2, [r3, #0]
	if (frameModified | forceUpdate) {
 8000440:	4b33      	ldr	r3, [pc, #204]	; (8000510 <DigiLedUpdate+0xdc>)
 8000442:	781a      	ldrb	r2, [r3, #0]
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	4313      	orrs	r3, r2
 800044a:	b2db      	uxtb	r3, r3
 800044c:	2b00      	cmp	r3, #0
 800044e:	d057      	beq.n	8000500 <DigiLedUpdate+0xcc>
		// add start of frame (0x00000000)
		for (int i = 0; i < LEDSTARTFRAMESIZE; i++) {
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
 8000454:	e007      	b.n	8000466 <DigiLedUpdate+0x32>
			SpiSendFrame[i] = 0x00;
 8000456:	4a2f      	ldr	r2, [pc, #188]	; (8000514 <DigiLedUpdate+0xe0>)
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	18d3      	adds	r3, r2, r3
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < LEDSTARTFRAMESIZE; i++) {
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	3301      	adds	r3, #1
 8000464:	617b      	str	r3, [r7, #20]
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	2b03      	cmp	r3, #3
 800046a:	ddf4      	ble.n	8000456 <DigiLedUpdate+0x22>
		}
		// add all LED packets of the frame
		uint32_t SpiDataPacket = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	613b      	str	r3, [r7, #16]
		for (uint32_t led = 0; led < LEDFRAMESIZE; led++) {
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	e02b      	b.n	80004ce <DigiLedUpdate+0x9a>
			SpiSendFrame[LEDSTARTFRAMESIZE + SpiDataPacket + 0] =
 8000476:	693b      	ldr	r3, [r7, #16]
 8000478:	3304      	adds	r3, #4
					digitalLedframe[led].FieldsOut.CMD;	// Add INIT and GLOBAL to SPI send frame
 800047a:	4927      	ldr	r1, [pc, #156]	; (8000518 <DigiLedUpdate+0xe4>)
 800047c:	68fa      	ldr	r2, [r7, #12]
 800047e:	0092      	lsls	r2, r2, #2
 8000480:	188a      	adds	r2, r1, r2
 8000482:	3203      	adds	r2, #3
 8000484:	7811      	ldrb	r1, [r2, #0]
			SpiSendFrame[LEDSTARTFRAMESIZE + SpiDataPacket + 0] =
 8000486:	4a23      	ldr	r2, [pc, #140]	; (8000514 <DigiLedUpdate+0xe0>)
 8000488:	54d1      	strb	r1, [r2, r3]
			SpiSendFrame[LEDSTARTFRAMESIZE + SpiDataPacket + 1] =
 800048a:	693b      	ldr	r3, [r7, #16]
 800048c:	3305      	adds	r3, #5
					digitalLedframe[led].FieldsOut.BLUE; // Add BLUE to SPI send frame
 800048e:	4922      	ldr	r1, [pc, #136]	; (8000518 <DigiLedUpdate+0xe4>)
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	0092      	lsls	r2, r2, #2
 8000494:	188a      	adds	r2, r1, r2
 8000496:	3202      	adds	r2, #2
 8000498:	7811      	ldrb	r1, [r2, #0]
			SpiSendFrame[LEDSTARTFRAMESIZE + SpiDataPacket + 1] =
 800049a:	4a1e      	ldr	r2, [pc, #120]	; (8000514 <DigiLedUpdate+0xe0>)
 800049c:	54d1      	strb	r1, [r2, r3]
			SpiSendFrame[LEDSTARTFRAMESIZE + SpiDataPacket + 2] =
 800049e:	693b      	ldr	r3, [r7, #16]
 80004a0:	3306      	adds	r3, #6
					digitalLedframe[led].FieldsOut.GREEN; // Add GREEN to SPI send frame
 80004a2:	491d      	ldr	r1, [pc, #116]	; (8000518 <DigiLedUpdate+0xe4>)
 80004a4:	68fa      	ldr	r2, [r7, #12]
 80004a6:	0092      	lsls	r2, r2, #2
 80004a8:	188a      	adds	r2, r1, r2
 80004aa:	3201      	adds	r2, #1
 80004ac:	7811      	ldrb	r1, [r2, #0]
			SpiSendFrame[LEDSTARTFRAMESIZE + SpiDataPacket + 2] =
 80004ae:	4a19      	ldr	r2, [pc, #100]	; (8000514 <DigiLedUpdate+0xe0>)
 80004b0:	54d1      	strb	r1, [r2, r3]
			SpiSendFrame[LEDSTARTFRAMESIZE + SpiDataPacket + 3] =
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	3307      	adds	r3, #7
					digitalLedframe[led].FieldsOut.RED;	// Add RED to SPI send frame
 80004b6:	4a18      	ldr	r2, [pc, #96]	; (8000518 <DigiLedUpdate+0xe4>)
 80004b8:	68f9      	ldr	r1, [r7, #12]
 80004ba:	0089      	lsls	r1, r1, #2
 80004bc:	5c89      	ldrb	r1, [r1, r2]
			SpiSendFrame[LEDSTARTFRAMESIZE + SpiDataPacket + 3] =
 80004be:	4a15      	ldr	r2, [pc, #84]	; (8000514 <DigiLedUpdate+0xe0>)
 80004c0:	54d1      	strb	r1, [r2, r3]
			SpiDataPacket = SpiDataPacket + 4;
 80004c2:	693b      	ldr	r3, [r7, #16]
 80004c4:	3304      	adds	r3, #4
 80004c6:	613b      	str	r3, [r7, #16]
		for (uint32_t led = 0; led < LEDFRAMESIZE; led++) {
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	3301      	adds	r3, #1
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	2b3f      	cmp	r3, #63	; 0x3f
 80004d2:	d9d0      	bls.n	8000476 <DigiLedUpdate+0x42>
		}
		// add end of frame (0xffffffff)
		for (int i = 0; i < 4; i++) {
 80004d4:	2300      	movs	r3, #0
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	e008      	b.n	80004ec <DigiLedUpdate+0xb8>
			SpiSendFrame[LEDSTARTFRAMESIZE + 4 * LEDFRAMESIZE + i] = 0xFF;
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	3305      	adds	r3, #5
 80004de:	33ff      	adds	r3, #255	; 0xff
 80004e0:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <DigiLedUpdate+0xe0>)
 80004e2:	21ff      	movs	r1, #255	; 0xff
 80004e4:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 4; i++) {
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	3301      	adds	r3, #1
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	2b03      	cmp	r3, #3
 80004f0:	ddf3      	ble.n	80004da <DigiLedUpdate+0xa6>
		}
		// send spi frame with all led values
		SendSPI(LEDMATRIXSPIHANDLER, SpiSendFrame, sizeof(SpiSendFrame));
 80004f2:	2384      	movs	r3, #132	; 0x84
 80004f4:	005a      	lsls	r2, r3, #1
 80004f6:	4907      	ldr	r1, [pc, #28]	; (8000514 <DigiLedUpdate+0xe0>)
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <DigiLedUpdate+0xe8>)
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 f96e 	bl	80007dc <SendSPI>

	}

	frameModified = FALSE; // reset frame modified identifier.
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <DigiLedUpdate+0xdc>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b006      	add	sp, #24
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	20000130 	.word	0x20000130
 8000514:	20000028 	.word	0x20000028
 8000518:	20000134 	.word	0x20000134
 800051c:	20000234 	.word	0x20000234

08000520 <DigiLedTestPosition>:
/**
 * @brief Test led position is within range.
 * @param led led position
 * @return result of evaluation ad define.
 */
uint8_t DigiLedTestPosition(uint8_t led) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	0002      	movs	r2, r0
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	701a      	strb	r2, [r3, #0]
	uint8_t returnValue = OUTOFRANGE;
 800052c:	210f      	movs	r1, #15
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2201      	movs	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
	if (led <= LEDFRAMESIZE) {
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b40      	cmp	r3, #64	; 0x40
 800053a:	d802      	bhi.n	8000542 <DigiLedTestPosition+0x22>
		returnValue = RANGEOK;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2200      	movs	r2, #0
 8000540:	701a      	strb	r2, [r3, #0]
	}
	return returnValue;
 8000542:	230f      	movs	r3, #15
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	781b      	ldrb	r3, [r3, #0]
}
 8000548:	0018      	movs	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	b004      	add	sp, #16
 800054e:	bd80      	pop	{r7, pc}

08000550 <DigiLedRGBColorPickerMode>:

}
/*-----------------------------------------------------------*/

void DigiLedRGBColorPickerMode(uint8_t color,uint16_t time,uint8_t intensity)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	0004      	movs	r4, r0
 8000558:	0008      	movs	r0, r1
 800055a:	0011      	movs	r1, r2
 800055c:	1dfb      	adds	r3, r7, #7
 800055e:	1c22      	adds	r2, r4, #0
 8000560:	701a      	strb	r2, [r3, #0]
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	1c02      	adds	r2, r0, #0
 8000566:	801a      	strh	r2, [r3, #0]
 8000568:	1dbb      	adds	r3, r7, #6
 800056a:	1c0a      	adds	r2, r1, #0
 800056c:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= LEDFRAMESIZE; i++)
 800056e:	2301      	movs	r3, #1
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	e013      	b.n	800059c <DigiLedRGBColorPickerMode+0x4c>
    {
	 DigiLedSetColor(i,color,intensity);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	b2d8      	uxtb	r0, r3
 8000578:	1dbb      	adds	r3, r7, #6
 800057a:	781a      	ldrb	r2, [r3, #0]
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	0019      	movs	r1, r3
 8000582:	f7ff fedf 	bl	8000344 <DigiLedSetColor>
		DigiLedUpdate(1);
 8000586:	2001      	movs	r0, #1
 8000588:	f7ff ff54 	bl	8000434 <DigiLedUpdate>
	  HAL_Delay(time);
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	0018      	movs	r0, r3
 8000592:	f000 fa3d 	bl	8000a10 <HAL_Delay>
	for (int i = 1; i <= LEDFRAMESIZE; i++)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	3301      	adds	r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2b40      	cmp	r3, #64	; 0x40
 80005a0:	dde8      	ble.n	8000574 <DigiLedRGBColorPickerMode+0x24>
    }
}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b005      	add	sp, #20
 80005aa:	bd90      	pop	{r4, r7, pc}

080005ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <MX_GPIO_Init+0x28>)
 80005b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <MX_GPIO_Init+0x28>)
 80005b8:	2102      	movs	r1, #2
 80005ba:	430a      	orrs	r2, r1
 80005bc:	635a      	str	r2, [r3, #52]	; 0x34
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <MX_GPIO_Init+0x28>)
 80005c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005c2:	2202      	movs	r2, #2
 80005c4:	4013      	ands	r3, r2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40021000 	.word	0x40021000

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 f992 	bl	8000904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f825 	bl	800062e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f7ff ffe2 	bl	80005ac <MX_GPIO_Init>
  MX_SPI1_Init();
 80005e8:	f000 f86e 	bl	80006c8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  DigiLedInit();
 80005ec:	f7ff fe16 	bl	800021c <DigiLedInit>
  while (1)
  {

    /* USER CODE END WHILE */
	      /* USER CODE BEGIN 3 */
	  DigiLedRGBColorPickerMode(ORANGE, 10, 3);
 80005f0:	2203      	movs	r2, #3
 80005f2:	210a      	movs	r1, #10
 80005f4:	200c      	movs	r0, #12
 80005f6:	f7ff ffab 	bl	8000550 <DigiLedRGBColorPickerMode>
	    HAL_Delay(1000);
 80005fa:	23fa      	movs	r3, #250	; 0xfa
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 fa06 	bl	8000a10 <HAL_Delay>
		  DigiLedRGBColorPickerMode(PURPLE, 10, 3);
 8000604:	2203      	movs	r2, #3
 8000606:	210a      	movs	r1, #10
 8000608:	200a      	movs	r0, #10
 800060a:	f7ff ffa1 	bl	8000550 <DigiLedRGBColorPickerMode>
		    HAL_Delay(1000);
 800060e:	23fa      	movs	r3, #250	; 0xfa
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	0018      	movs	r0, r3
 8000614:	f000 f9fc 	bl	8000a10 <HAL_Delay>
			  DigiLedRGBColorPickerMode(BLACK, 10, 3);
 8000618:	2203      	movs	r2, #3
 800061a:	210a      	movs	r1, #10
 800061c:	2001      	movs	r0, #1
 800061e:	f7ff ff97 	bl	8000550 <DigiLedRGBColorPickerMode>
			    HAL_Delay(1000);
 8000622:	23fa      	movs	r3, #250	; 0xfa
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	0018      	movs	r0, r3
 8000628:	f000 f9f2 	bl	8000a10 <HAL_Delay>
	  DigiLedRGBColorPickerMode(ORANGE, 10, 3);
 800062c:	e7e0      	b.n	80005f0 <main+0x18>

0800062e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062e:	b590      	push	{r4, r7, lr}
 8000630:	b095      	sub	sp, #84	; 0x54
 8000632:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000634:	2414      	movs	r4, #20
 8000636:	193b      	adds	r3, r7, r4
 8000638:	0018      	movs	r0, r3
 800063a:	233c      	movs	r3, #60	; 0x3c
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f001 fd06 	bl	8002050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	0018      	movs	r0, r3
 8000648:	2310      	movs	r3, #16
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f001 fcff 	bl	8002050 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fc1e 	bl	8000e98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	193b      	adds	r3, r7, r4
 800065e:	2202      	movs	r2, #2
 8000660:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	2280      	movs	r2, #128	; 0x80
 8000666:	0052      	lsls	r2, r2, #1
 8000668:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800066a:	193b      	adds	r3, r7, r4
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2240      	movs	r2, #64	; 0x40
 8000674:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	193b      	adds	r3, r7, r4
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fc4a 	bl	8000f18 <HAL_RCC_OscConfig>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000688:	f000 f819 	bl	80006be <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2207      	movs	r2, #7
 8000690:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2100      	movs	r1, #0
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 ff95 	bl	80015d8 <HAL_RCC_ClockConfig>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006b2:	f000 f804 	bl	80006be <Error_Handler>
  }
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b015      	add	sp, #84	; 0x54
 80006bc:	bd90      	pop	{r4, r7, pc}

080006be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c2:	b672      	cpsid	i
}
 80006c4:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <Error_Handler+0x8>

080006c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_SPI1_Init+0x74>)
 80006ce:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <MX_SPI1_Init+0x78>)
 80006d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_SPI1_Init+0x74>)
 80006d4:	2282      	movs	r2, #130	; 0x82
 80006d6:	0052      	lsls	r2, r2, #1
 80006d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_SPI1_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_SPI1_Init+0x74>)
 80006e2:	22e0      	movs	r2, #224	; 0xe0
 80006e4:	00d2      	lsls	r2, r2, #3
 80006e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_SPI1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_SPI1_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_SPI1_Init+0x74>)
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	0092      	lsls	r2, r2, #2
 80006fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_SPI1_Init+0x74>)
 80006fe:	2218      	movs	r2, #24
 8000700:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_SPI1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_SPI1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_SPI1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_SPI1_Init+0x74>)
 8000716:	2207      	movs	r2, #7
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_SPI1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_SPI1_Init+0x74>)
 8000722:	2208      	movs	r2, #8
 8000724:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <MX_SPI1_Init+0x74>)
 8000728:	0018      	movs	r0, r3
 800072a:	f001 f8df 	bl	80018ec <HAL_SPI_Init>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d001      	beq.n	8000736 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000732:	f7ff ffc4 	bl	80006be <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000234 	.word	0x20000234
 8000740:	40013000 	.word	0x40013000

08000744 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b08b      	sub	sp, #44	; 0x2c
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	2414      	movs	r4, #20
 800074e:	193b      	adds	r3, r7, r4
 8000750:	0018      	movs	r0, r3
 8000752:	2314      	movs	r3, #20
 8000754:	001a      	movs	r2, r3
 8000756:	2100      	movs	r1, #0
 8000758:	f001 fc7a 	bl	8002050 <memset>
  if(spiHandle->Instance==SPI1)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <HAL_SPI_MspInit+0x8c>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d12f      	bne.n	80007c6 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000766:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <HAL_SPI_MspInit+0x90>)
 8000768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <HAL_SPI_MspInit+0x90>)
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	0149      	lsls	r1, r1, #5
 8000770:	430a      	orrs	r2, r1
 8000772:	641a      	str	r2, [r3, #64]	; 0x40
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <HAL_SPI_MspInit+0x90>)
 8000776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	015b      	lsls	r3, r3, #5
 800077c:	4013      	ands	r3, r2
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <HAL_SPI_MspInit+0x90>)
 8000784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <HAL_SPI_MspInit+0x90>)
 8000788:	2102      	movs	r1, #2
 800078a:	430a      	orrs	r2, r1
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <HAL_SPI_MspInit+0x90>)
 8000790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000792:	2202      	movs	r2, #2
 8000794:	4013      	ands	r3, r2
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800079a:	0021      	movs	r1, r4
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2228      	movs	r2, #40	; 0x28
 80007a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2202      	movs	r2, #2
 80007a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	4a06      	ldr	r2, [pc, #24]	; (80007d8 <HAL_SPI_MspInit+0x94>)
 80007be:	0019      	movs	r1, r3
 80007c0:	0010      	movs	r0, r2
 80007c2:	f000 f9fd 	bl	8000bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b00b      	add	sp, #44	; 0x2c
 80007cc:	bd90      	pop	{r4, r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	40013000 	.word	0x40013000
 80007d4:	40021000 	.word	0x40021000
 80007d8:	50000400 	.word	0x50000400

080007dc <SendSPI>:
 * @param2: Pointer to data buffer
 * @param3: data size in bytes unit
 * @retval: Status
 */
Status_TypeDef SendSPI(SPI_HANDLE *xPort, uint8_t pData[], uint16_t Size)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b087      	sub	sp, #28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	1dbb      	adds	r3, r7, #6
 80007e8:	801a      	strh	r2, [r3, #0]
	Status_TypeDef Status=STATUS_ERR;
 80007ea:	2417      	movs	r4, #23
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	22ff      	movs	r2, #255	; 0xff
 80007f0:	701a      	strb	r2, [r3, #0]

	if (NULL!=xPort && NULL!=pData)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d00f      	beq.n	8000818 <SendSPI+0x3c>
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d00c      	beq.n	8000818 <SendSPI+0x3c>
	{
		if (HAL_OK == HAL_SPI_Transmit(xPort, pData, Size, TIM_OUT_10MS))
 80007fe:	1dbb      	adds	r3, r7, #6
 8000800:	881a      	ldrh	r2, [r3, #0]
 8000802:	68b9      	ldr	r1, [r7, #8]
 8000804:	68f8      	ldr	r0, [r7, #12]
 8000806:	230a      	movs	r3, #10
 8000808:	f001 f928 	bl	8001a5c <HAL_SPI_Transmit>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d107      	bne.n	8000820 <SendSPI+0x44>
			Status = STATUS_OK;
 8000810:	193b      	adds	r3, r7, r4
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
		if (HAL_OK == HAL_SPI_Transmit(xPort, pData, Size, TIM_OUT_10MS))
 8000816:	e003      	b.n	8000820 <SendSPI+0x44>
		}
	else
		Status = STATUS_ERR;
 8000818:	2317      	movs	r3, #23
 800081a:	18fb      	adds	r3, r7, r3
 800081c:	22ff      	movs	r2, #255	; 0xff
 800081e:	701a      	strb	r2, [r3, #0]

	return Status;
 8000820:	2317      	movs	r3, #23
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	781b      	ldrb	r3, [r3, #0]
}
 8000826:	0018      	movs	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	b007      	add	sp, #28
 800082c:	bd90      	pop	{r4, r7, pc}
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_MspInit+0x44>)
 8000838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_MspInit+0x44>)
 800083c:	2101      	movs	r1, #1
 800083e:	430a      	orrs	r2, r1
 8000840:	641a      	str	r2, [r3, #64]	; 0x40
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_MspInit+0x44>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	2201      	movs	r2, #1
 8000848:	4013      	ands	r3, r2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_MspInit+0x44>)
 8000850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_MspInit+0x44>)
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	0549      	lsls	r1, r1, #21
 8000858:	430a      	orrs	r2, r1
 800085a:	63da      	str	r2, [r3, #60]	; 0x3c
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_MspInit+0x44>)
 800085e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	055b      	lsls	r3, r3, #21
 8000864:	4013      	ands	r3, r2
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b002      	add	sp, #8
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	40021000 	.word	0x40021000

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800087c:	e7fe      	b.n	800087c <NMI_Handler+0x4>

0800087e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <HardFault_Handler+0x4>

08000884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 f89c 	bl	80009d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b4:	f7ff fff7 	bl	80008a6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <LoopForever+0x6>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	; (80008f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <LoopForever+0xe>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	; (80008fc <LoopForever+0x16>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008de:	f001 fb93 	bl	8002008 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80008e2:	f7ff fe79 	bl	80005d8 <main>

080008e6 <LoopForever>:

LoopForever:
  b LoopForever
 80008e6:	e7fe      	b.n	80008e6 <LoopForever>
  ldr   r0, =_estack
 80008e8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008f4:	080020f8 	.word	0x080020f8
  ldr r2, =_sbss
 80008f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008fc:	2000029c 	.word	0x2000029c

08000900 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_COMP_IRQHandler>
	...

08000904 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_Init+0x3c>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_Init+0x3c>)
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	0049      	lsls	r1, r1, #1
 800091a:	430a      	orrs	r2, r1
 800091c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800091e:	2003      	movs	r0, #3
 8000920:	f000 f810 	bl	8000944 <HAL_InitTick>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d003      	beq.n	8000930 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
 800092e:	e001      	b.n	8000934 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000930:	f7ff ff7e 	bl	8000830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	781b      	ldrb	r3, [r3, #0]
}
 8000938:	0018      	movs	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	b002      	add	sp, #8
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800094c:	230f      	movs	r3, #15
 800094e:	18fb      	adds	r3, r7, r3
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <HAL_InitTick+0x88>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d02b      	beq.n	80009b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800095c:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <HAL_InitTick+0x8c>)
 800095e:	681c      	ldr	r4, [r3, #0]
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <HAL_InitTick+0x88>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	0019      	movs	r1, r3
 8000966:	23fa      	movs	r3, #250	; 0xfa
 8000968:	0098      	lsls	r0, r3, #2
 800096a:	f7ff fbcb 	bl	8000104 <__udivsi3>
 800096e:	0003      	movs	r3, r0
 8000970:	0019      	movs	r1, r3
 8000972:	0020      	movs	r0, r4
 8000974:	f7ff fbc6 	bl	8000104 <__udivsi3>
 8000978:	0003      	movs	r3, r0
 800097a:	0018      	movs	r0, r3
 800097c:	f000 f913 	bl	8000ba6 <HAL_SYSTICK_Config>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d112      	bne.n	80009aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b03      	cmp	r3, #3
 8000988:	d80a      	bhi.n	80009a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	2301      	movs	r3, #1
 800098e:	425b      	negs	r3, r3
 8000990:	2200      	movs	r2, #0
 8000992:	0018      	movs	r0, r3
 8000994:	f000 f8f2 	bl	8000b7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_InitTick+0x90>)
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	e00d      	b.n	80009bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009a0:	230f      	movs	r3, #15
 80009a2:	18fb      	adds	r3, r7, r3
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
 80009a8:	e008      	b.n	80009bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009aa:	230f      	movs	r3, #15
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
 80009b2:	e003      	b.n	80009bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009b4:	230f      	movs	r3, #15
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009bc:	230f      	movs	r3, #15
 80009be:	18fb      	adds	r3, r7, r3
 80009c0:	781b      	ldrb	r3, [r3, #0]
}
 80009c2:	0018      	movs	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b005      	add	sp, #20
 80009c8:	bd90      	pop	{r4, r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000004 	.word	0x20000004

080009d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x1c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	001a      	movs	r2, r3
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_IncTick+0x20>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	18d2      	adds	r2, r2, r3
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <HAL_IncTick+0x20>)
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000298 	.word	0x20000298

080009fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b02      	ldr	r3, [pc, #8]	; (8000a0c <HAL_GetTick+0x10>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	0018      	movs	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	20000298 	.word	0x20000298

08000a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a18:	f7ff fff0 	bl	80009fc <HAL_GetTick>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	3301      	adds	r3, #1
 8000a28:	d005      	beq.n	8000a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_Delay+0x44>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	001a      	movs	r2, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	189b      	adds	r3, r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	f7ff ffe0 	bl	80009fc <HAL_GetTick>
 8000a3c:	0002      	movs	r2, r0
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d8f7      	bhi.n	8000a38 <HAL_Delay+0x28>
  {
  }
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b004      	add	sp, #16
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	20000008 	.word	0x20000008

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	0002      	movs	r2, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a6c:	d828      	bhi.n	8000ac0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a6e:	4a2f      	ldr	r2, [pc, #188]	; (8000b2c <__NVIC_SetPriority+0xd4>)
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	33c0      	adds	r3, #192	; 0xc0
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	589b      	ldr	r3, [r3, r2]
 8000a7e:	1dfa      	adds	r2, r7, #7
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	0011      	movs	r1, r2
 8000a84:	2203      	movs	r2, #3
 8000a86:	400a      	ands	r2, r1
 8000a88:	00d2      	lsls	r2, r2, #3
 8000a8a:	21ff      	movs	r1, #255	; 0xff
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	000a      	movs	r2, r1
 8000a90:	43d2      	mvns	r2, r2
 8000a92:	401a      	ands	r2, r3
 8000a94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	019b      	lsls	r3, r3, #6
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	401a      	ands	r2, r3
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	4003      	ands	r3, r0
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aac:	481f      	ldr	r0, [pc, #124]	; (8000b2c <__NVIC_SetPriority+0xd4>)
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	089b      	lsrs	r3, r3, #2
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	33c0      	adds	r3, #192	; 0xc0
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000abe:	e031      	b.n	8000b24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <__NVIC_SetPriority+0xd8>)
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	0019      	movs	r1, r3
 8000ac8:	230f      	movs	r3, #15
 8000aca:	400b      	ands	r3, r1
 8000acc:	3b08      	subs	r3, #8
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	3306      	adds	r3, #6
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	18d3      	adds	r3, r2, r3
 8000ad6:	3304      	adds	r3, #4
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	1dfa      	adds	r2, r7, #7
 8000adc:	7812      	ldrb	r2, [r2, #0]
 8000ade:	0011      	movs	r1, r2
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	400a      	ands	r2, r1
 8000ae4:	00d2      	lsls	r2, r2, #3
 8000ae6:	21ff      	movs	r1, #255	; 0xff
 8000ae8:	4091      	lsls	r1, r2
 8000aea:	000a      	movs	r2, r1
 8000aec:	43d2      	mvns	r2, r2
 8000aee:	401a      	ands	r2, r3
 8000af0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	019b      	lsls	r3, r3, #6
 8000af6:	22ff      	movs	r2, #255	; 0xff
 8000af8:	401a      	ands	r2, r3
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	0018      	movs	r0, r3
 8000b00:	2303      	movs	r3, #3
 8000b02:	4003      	ands	r3, r0
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b08:	4809      	ldr	r0, [pc, #36]	; (8000b30 <__NVIC_SetPriority+0xd8>)
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	001c      	movs	r4, r3
 8000b10:	230f      	movs	r3, #15
 8000b12:	4023      	ands	r3, r4
 8000b14:	3b08      	subs	r3, #8
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	3306      	adds	r3, #6
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	18c3      	adds	r3, r0, r3
 8000b20:	3304      	adds	r3, #4
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b003      	add	sp, #12
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	1e5a      	subs	r2, r3, #1
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	045b      	lsls	r3, r3, #17
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d301      	bcc.n	8000b4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e010      	b.n	8000b6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <SysTick_Config+0x44>)
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	3a01      	subs	r2, #1
 8000b52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b54:	2301      	movs	r3, #1
 8000b56:	425b      	negs	r3, r3
 8000b58:	2103      	movs	r1, #3
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f7ff ff7c 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <SysTick_Config+0x44>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <SysTick_Config+0x44>)
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	0018      	movs	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	e000e010 	.word	0xe000e010

08000b7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	210f      	movs	r1, #15
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	1c02      	adds	r2, r0, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	0011      	movs	r1, r2
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff ff5d 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b004      	add	sp, #16
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff ffbf 	bl	8000b34 <SysTick_Config>
 8000bb6:	0003      	movs	r3, r0
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bce:	e14d      	b.n	8000e6c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	4091      	lsls	r1, r2
 8000bda:	000a      	movs	r2, r1
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d100      	bne.n	8000be8 <HAL_GPIO_Init+0x28>
 8000be6:	e13e      	b.n	8000e66 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2203      	movs	r2, #3
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d005      	beq.n	8000c00 <HAL_GPIO_Init+0x40>
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d130      	bne.n	8000c62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	409a      	lsls	r2, r3
 8000c0e:	0013      	movs	r3, r2
 8000c10:	43da      	mvns	r2, r3
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68da      	ldr	r2, [r3, #12]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	409a      	lsls	r2, r3
 8000c22:	0013      	movs	r3, r2
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c36:	2201      	movs	r2, #1
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
 8000c3c:	0013      	movs	r3, r2
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	091b      	lsrs	r3, r3, #4
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
 8000c54:	0013      	movs	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	2203      	movs	r2, #3
 8000c68:	4013      	ands	r3, r2
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d017      	beq.n	8000c9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	2203      	movs	r2, #3
 8000c7a:	409a      	lsls	r2, r3
 8000c7c:	0013      	movs	r3, r2
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	689a      	ldr	r2, [r3, #8]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	0013      	movs	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d123      	bne.n	8000cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	08da      	lsrs	r2, r3, #3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3208      	adds	r2, #8
 8000cb2:	0092      	lsls	r2, r2, #2
 8000cb4:	58d3      	ldr	r3, [r2, r3]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	2207      	movs	r2, #7
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	220f      	movs	r2, #15
 8000cc2:	409a      	lsls	r2, r3
 8000cc4:	0013      	movs	r3, r2
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	691a      	ldr	r2, [r3, #16]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	2107      	movs	r1, #7
 8000cd6:	400b      	ands	r3, r1
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	409a      	lsls	r2, r3
 8000cdc:	0013      	movs	r3, r2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	08da      	lsrs	r2, r3, #3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3208      	adds	r2, #8
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	6939      	ldr	r1, [r7, #16]
 8000cf0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	409a      	lsls	r2, r3
 8000d00:	0013      	movs	r3, r2
 8000d02:	43da      	mvns	r2, r3
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2203      	movs	r2, #3
 8000d10:	401a      	ands	r2, r3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	409a      	lsls	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	23c0      	movs	r3, #192	; 0xc0
 8000d2c:	029b      	lsls	r3, r3, #10
 8000d2e:	4013      	ands	r3, r2
 8000d30:	d100      	bne.n	8000d34 <HAL_GPIO_Init+0x174>
 8000d32:	e098      	b.n	8000e66 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d34:	4a53      	ldr	r2, [pc, #332]	; (8000e84 <HAL_GPIO_Init+0x2c4>)
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	089b      	lsrs	r3, r3, #2
 8000d3a:	3318      	adds	r3, #24
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	589b      	ldr	r3, [r3, r2]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	2203      	movs	r2, #3
 8000d46:	4013      	ands	r3, r2
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	220f      	movs	r2, #15
 8000d4c:	409a      	lsls	r2, r3
 8000d4e:	0013      	movs	r3, r2
 8000d50:	43da      	mvns	r2, r3
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	23a0      	movs	r3, #160	; 0xa0
 8000d5c:	05db      	lsls	r3, r3, #23
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d019      	beq.n	8000d96 <HAL_GPIO_Init+0x1d6>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a48      	ldr	r2, [pc, #288]	; (8000e88 <HAL_GPIO_Init+0x2c8>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d013      	beq.n	8000d92 <HAL_GPIO_Init+0x1d2>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a47      	ldr	r2, [pc, #284]	; (8000e8c <HAL_GPIO_Init+0x2cc>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d00d      	beq.n	8000d8e <HAL_GPIO_Init+0x1ce>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a46      	ldr	r2, [pc, #280]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d007      	beq.n	8000d8a <HAL_GPIO_Init+0x1ca>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a45      	ldr	r2, [pc, #276]	; (8000e94 <HAL_GPIO_Init+0x2d4>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d101      	bne.n	8000d86 <HAL_GPIO_Init+0x1c6>
 8000d82:	2304      	movs	r3, #4
 8000d84:	e008      	b.n	8000d98 <HAL_GPIO_Init+0x1d8>
 8000d86:	2305      	movs	r3, #5
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x1d8>
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e004      	b.n	8000d98 <HAL_GPIO_Init+0x1d8>
 8000d8e:	2302      	movs	r3, #2
 8000d90:	e002      	b.n	8000d98 <HAL_GPIO_Init+0x1d8>
 8000d92:	2301      	movs	r3, #1
 8000d94:	e000      	b.n	8000d98 <HAL_GPIO_Init+0x1d8>
 8000d96:	2300      	movs	r3, #0
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	2103      	movs	r1, #3
 8000d9c:	400a      	ands	r2, r1
 8000d9e:	00d2      	lsls	r2, r2, #3
 8000da0:	4093      	lsls	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000da8:	4936      	ldr	r1, [pc, #216]	; (8000e84 <HAL_GPIO_Init+0x2c4>)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	089b      	lsrs	r3, r3, #2
 8000dae:	3318      	adds	r3, #24
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000db6:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <HAL_GPIO_Init+0x2c4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	035b      	lsls	r3, r3, #13
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dda:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <HAL_GPIO_Init+0x2c4>)
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000de0:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <HAL_GPIO_Init+0x2c4>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	43da      	mvns	r2, r3
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	039b      	lsls	r3, r3, #14
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d003      	beq.n	8000e04 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e04:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <HAL_GPIO_Init+0x2c4>)
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e0a:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <HAL_GPIO_Init+0x2c4>)
 8000e0c:	2384      	movs	r3, #132	; 0x84
 8000e0e:	58d3      	ldr	r3, [r2, r3]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	43da      	mvns	r2, r3
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	029b      	lsls	r3, r3, #10
 8000e24:	4013      	ands	r3, r2
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e30:	4914      	ldr	r1, [pc, #80]	; (8000e84 <HAL_GPIO_Init+0x2c4>)
 8000e32:	2284      	movs	r2, #132	; 0x84
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000e38:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <HAL_GPIO_Init+0x2c4>)
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	58d3      	ldr	r3, [r2, r3]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	43da      	mvns	r2, r3
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	025b      	lsls	r3, r3, #9
 8000e52:	4013      	ands	r3, r2
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e5e:	4909      	ldr	r1, [pc, #36]	; (8000e84 <HAL_GPIO_Init+0x2c4>)
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	40da      	lsrs	r2, r3
 8000e74:	1e13      	subs	r3, r2, #0
 8000e76:	d000      	beq.n	8000e7a <HAL_GPIO_Init+0x2ba>
 8000e78:	e6aa      	b.n	8000bd0 <HAL_GPIO_Init+0x10>
  }
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b006      	add	sp, #24
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40021800 	.word	0x40021800
 8000e88:	50000400 	.word	0x50000400
 8000e8c:	50000800 	.word	0x50000800
 8000e90:	50000c00 	.word	0x50000c00
 8000e94:	50001000 	.word	0x50001000

08000e98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ea0:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d11f      	bne.n	8000efc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	189b      	adds	r3, r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4912      	ldr	r1, [pc, #72]	; (8000f14 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff f91a 	bl	8000104 <__udivsi3>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ed6:	e008      	b.n	8000eea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	e001      	b.n	8000eea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e009      	b.n	8000efe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000eec:	695a      	ldr	r2, [r3, #20]
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d0ed      	beq.n	8000ed8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	0018      	movs	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b004      	add	sp, #16
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	40007000 	.word	0x40007000
 8000f0c:	fffff9ff 	.word	0xfffff9ff
 8000f10:	20000000 	.word	0x20000000
 8000f14:	000f4240 	.word	0x000f4240

08000f18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d102      	bne.n	8000f2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	f000 fb50 	bl	80015cc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2201      	movs	r2, #1
 8000f32:	4013      	ands	r3, r2
 8000f34:	d100      	bne.n	8000f38 <HAL_RCC_OscConfig+0x20>
 8000f36:	e07c      	b.n	8001032 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f38:	4bc3      	ldr	r3, [pc, #780]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	2238      	movs	r2, #56	; 0x38
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f42:	4bc1      	ldr	r3, [pc, #772]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	2203      	movs	r2, #3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	2b10      	cmp	r3, #16
 8000f50:	d102      	bne.n	8000f58 <HAL_RCC_OscConfig+0x40>
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d002      	beq.n	8000f5e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d10b      	bne.n	8000f76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5e:	4bba      	ldr	r3, [pc, #744]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	029b      	lsls	r3, r3, #10
 8000f66:	4013      	ands	r3, r2
 8000f68:	d062      	beq.n	8001030 <HAL_RCC_OscConfig+0x118>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d15e      	bne.n	8001030 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e32a      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	025b      	lsls	r3, r3, #9
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d107      	bne.n	8000f92 <HAL_RCC_OscConfig+0x7a>
 8000f82:	4bb1      	ldr	r3, [pc, #708]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4bb0      	ldr	r3, [pc, #704]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	0249      	lsls	r1, r1, #9
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	e020      	b.n	8000fd4 <HAL_RCC_OscConfig+0xbc>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	23a0      	movs	r3, #160	; 0xa0
 8000f98:	02db      	lsls	r3, r3, #11
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d10e      	bne.n	8000fbc <HAL_RCC_OscConfig+0xa4>
 8000f9e:	4baa      	ldr	r3, [pc, #680]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4ba9      	ldr	r3, [pc, #676]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	02c9      	lsls	r1, r1, #11
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	4ba6      	ldr	r3, [pc, #664]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4ba5      	ldr	r3, [pc, #660]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8000fb2:	2180      	movs	r1, #128	; 0x80
 8000fb4:	0249      	lsls	r1, r1, #9
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	e00b      	b.n	8000fd4 <HAL_RCC_OscConfig+0xbc>
 8000fbc:	4ba2      	ldr	r3, [pc, #648]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4ba1      	ldr	r3, [pc, #644]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8000fc2:	49a2      	ldr	r1, [pc, #648]	; (800124c <HAL_RCC_OscConfig+0x334>)
 8000fc4:	400a      	ands	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	4b9f      	ldr	r3, [pc, #636]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b9e      	ldr	r3, [pc, #632]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8000fce:	49a0      	ldr	r1, [pc, #640]	; (8001250 <HAL_RCC_OscConfig+0x338>)
 8000fd0:	400a      	ands	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d014      	beq.n	8001006 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fd0e 	bl	80009fc <HAL_GetTick>
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe6:	f7ff fd09 	bl	80009fc <HAL_GetTick>
 8000fea:	0002      	movs	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b64      	cmp	r3, #100	; 0x64
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e2e9      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ff8:	4b93      	ldr	r3, [pc, #588]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	029b      	lsls	r3, r3, #10
 8001000:	4013      	ands	r3, r2
 8001002:	d0f0      	beq.n	8000fe6 <HAL_RCC_OscConfig+0xce>
 8001004:	e015      	b.n	8001032 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001006:	f7ff fcf9 	bl	80009fc <HAL_GetTick>
 800100a:	0003      	movs	r3, r0
 800100c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001010:	f7ff fcf4 	bl	80009fc <HAL_GetTick>
 8001014:	0002      	movs	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b64      	cmp	r3, #100	; 0x64
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e2d4      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001022:	4b89      	ldr	r3, [pc, #548]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	029b      	lsls	r3, r3, #10
 800102a:	4013      	ands	r3, r2
 800102c:	d1f0      	bne.n	8001010 <HAL_RCC_OscConfig+0xf8>
 800102e:	e000      	b.n	8001032 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001030:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2202      	movs	r2, #2
 8001038:	4013      	ands	r3, r2
 800103a:	d100      	bne.n	800103e <HAL_RCC_OscConfig+0x126>
 800103c:	e099      	b.n	8001172 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800103e:	4b82      	ldr	r3, [pc, #520]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	2238      	movs	r2, #56	; 0x38
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001048:	4b7f      	ldr	r3, [pc, #508]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2203      	movs	r2, #3
 800104e:	4013      	ands	r3, r2
 8001050:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	2b10      	cmp	r3, #16
 8001056:	d102      	bne.n	800105e <HAL_RCC_OscConfig+0x146>
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d002      	beq.n	8001064 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d135      	bne.n	80010d0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001064:	4b78      	ldr	r3, [pc, #480]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4013      	ands	r3, r2
 800106e:	d005      	beq.n	800107c <HAL_RCC_OscConfig+0x164>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e2a7      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107c:	4b72      	ldr	r3, [pc, #456]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4a74      	ldr	r2, [pc, #464]	; (8001254 <HAL_RCC_OscConfig+0x33c>)
 8001082:	4013      	ands	r3, r2
 8001084:	0019      	movs	r1, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	021a      	lsls	r2, r3, #8
 800108c:	4b6e      	ldr	r3, [pc, #440]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 800108e:	430a      	orrs	r2, r1
 8001090:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d112      	bne.n	80010be <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001098:	4b6b      	ldr	r3, [pc, #428]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a6e      	ldr	r2, [pc, #440]	; (8001258 <HAL_RCC_OscConfig+0x340>)
 800109e:	4013      	ands	r3, r2
 80010a0:	0019      	movs	r1, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	691a      	ldr	r2, [r3, #16]
 80010a6:	4b68      	ldr	r3, [pc, #416]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 80010a8:	430a      	orrs	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80010ac:	4b66      	ldr	r3, [pc, #408]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	0adb      	lsrs	r3, r3, #11
 80010b2:	2207      	movs	r2, #7
 80010b4:	4013      	ands	r3, r2
 80010b6:	4a69      	ldr	r2, [pc, #420]	; (800125c <HAL_RCC_OscConfig+0x344>)
 80010b8:	40da      	lsrs	r2, r3
 80010ba:	4b69      	ldr	r3, [pc, #420]	; (8001260 <HAL_RCC_OscConfig+0x348>)
 80010bc:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010be:	4b69      	ldr	r3, [pc, #420]	; (8001264 <HAL_RCC_OscConfig+0x34c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	0018      	movs	r0, r3
 80010c4:	f7ff fc3e 	bl	8000944 <HAL_InitTick>
 80010c8:	1e03      	subs	r3, r0, #0
 80010ca:	d051      	beq.n	8001170 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e27d      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d030      	beq.n	800113a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010d8:	4b5b      	ldr	r3, [pc, #364]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a5e      	ldr	r2, [pc, #376]	; (8001258 <HAL_RCC_OscConfig+0x340>)
 80010de:	4013      	ands	r3, r2
 80010e0:	0019      	movs	r1, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691a      	ldr	r2, [r3, #16]
 80010e6:	4b58      	ldr	r3, [pc, #352]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 80010e8:	430a      	orrs	r2, r1
 80010ea:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80010ec:	4b56      	ldr	r3, [pc, #344]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b55      	ldr	r3, [pc, #340]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	0049      	lsls	r1, r1, #1
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fa:	f7ff fc7f 	bl	80009fc <HAL_GetTick>
 80010fe:	0003      	movs	r3, r0
 8001100:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001104:	f7ff fc7a 	bl	80009fc <HAL_GetTick>
 8001108:	0002      	movs	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e25a      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001116:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	4013      	ands	r3, r2
 8001120:	d0f0      	beq.n	8001104 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001122:	4b49      	ldr	r3, [pc, #292]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	4a4b      	ldr	r2, [pc, #300]	; (8001254 <HAL_RCC_OscConfig+0x33c>)
 8001128:	4013      	ands	r3, r2
 800112a:	0019      	movs	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	021a      	lsls	r2, r3, #8
 8001132:	4b45      	ldr	r3, [pc, #276]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8001134:	430a      	orrs	r2, r1
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	e01b      	b.n	8001172 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800113a:	4b43      	ldr	r3, [pc, #268]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4b42      	ldr	r3, [pc, #264]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8001140:	4949      	ldr	r1, [pc, #292]	; (8001268 <HAL_RCC_OscConfig+0x350>)
 8001142:	400a      	ands	r2, r1
 8001144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001146:	f7ff fc59 	bl	80009fc <HAL_GetTick>
 800114a:	0003      	movs	r3, r0
 800114c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001150:	f7ff fc54 	bl	80009fc <HAL_GetTick>
 8001154:	0002      	movs	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e234      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001162:	4b39      	ldr	r3, [pc, #228]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4013      	ands	r3, r2
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x238>
 800116e:	e000      	b.n	8001172 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001170:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2208      	movs	r2, #8
 8001178:	4013      	ands	r3, r2
 800117a:	d047      	beq.n	800120c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800117c:	4b32      	ldr	r3, [pc, #200]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	2238      	movs	r2, #56	; 0x38
 8001182:	4013      	ands	r3, r2
 8001184:	2b18      	cmp	r3, #24
 8001186:	d10a      	bne.n	800119e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001188:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 800118a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118c:	2202      	movs	r2, #2
 800118e:	4013      	ands	r3, r2
 8001190:	d03c      	beq.n	800120c <HAL_RCC_OscConfig+0x2f4>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d138      	bne.n	800120c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e216      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d019      	beq.n	80011da <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80011a6:	4b28      	ldr	r3, [pc, #160]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 80011a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011aa:	4b27      	ldr	r3, [pc, #156]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 80011ac:	2101      	movs	r1, #1
 80011ae:	430a      	orrs	r2, r1
 80011b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b2:	f7ff fc23 	bl	80009fc <HAL_GetTick>
 80011b6:	0003      	movs	r3, r0
 80011b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011bc:	f7ff fc1e 	bl	80009fc <HAL_GetTick>
 80011c0:	0002      	movs	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e1fe      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011ce:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d2:	2202      	movs	r2, #2
 80011d4:	4013      	ands	r3, r2
 80011d6:	d0f1      	beq.n	80011bc <HAL_RCC_OscConfig+0x2a4>
 80011d8:	e018      	b.n	800120c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 80011dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 80011e0:	2101      	movs	r1, #1
 80011e2:	438a      	bics	r2, r1
 80011e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e6:	f7ff fc09 	bl	80009fc <HAL_GetTick>
 80011ea:	0003      	movs	r3, r0
 80011ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f0:	f7ff fc04 	bl	80009fc <HAL_GetTick>
 80011f4:	0002      	movs	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e1e4      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	2202      	movs	r2, #2
 8001208:	4013      	ands	r3, r2
 800120a:	d1f1      	bne.n	80011f0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2204      	movs	r2, #4
 8001212:	4013      	ands	r3, r2
 8001214:	d100      	bne.n	8001218 <HAL_RCC_OscConfig+0x300>
 8001216:	e0c7      	b.n	80013a8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001218:	231f      	movs	r3, #31
 800121a:	18fb      	adds	r3, r7, r3
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2238      	movs	r2, #56	; 0x38
 8001226:	4013      	ands	r3, r2
 8001228:	2b20      	cmp	r3, #32
 800122a:	d11f      	bne.n	800126c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_RCC_OscConfig+0x330>)
 800122e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001230:	2202      	movs	r2, #2
 8001232:	4013      	ands	r3, r2
 8001234:	d100      	bne.n	8001238 <HAL_RCC_OscConfig+0x320>
 8001236:	e0b7      	b.n	80013a8 <HAL_RCC_OscConfig+0x490>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d000      	beq.n	8001242 <HAL_RCC_OscConfig+0x32a>
 8001240:	e0b2      	b.n	80013a8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e1c2      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	40021000 	.word	0x40021000
 800124c:	fffeffff 	.word	0xfffeffff
 8001250:	fffbffff 	.word	0xfffbffff
 8001254:	ffff80ff 	.word	0xffff80ff
 8001258:	ffffc7ff 	.word	0xffffc7ff
 800125c:	00f42400 	.word	0x00f42400
 8001260:	20000000 	.word	0x20000000
 8001264:	20000004 	.word	0x20000004
 8001268:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800126c:	4bb5      	ldr	r3, [pc, #724]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 800126e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	055b      	lsls	r3, r3, #21
 8001274:	4013      	ands	r3, r2
 8001276:	d101      	bne.n	800127c <HAL_RCC_OscConfig+0x364>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <HAL_RCC_OscConfig+0x366>
 800127c:	2300      	movs	r3, #0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d011      	beq.n	80012a6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4bb0      	ldr	r3, [pc, #704]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 8001284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001286:	4baf      	ldr	r3, [pc, #700]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	0549      	lsls	r1, r1, #21
 800128c:	430a      	orrs	r2, r1
 800128e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001290:	4bac      	ldr	r3, [pc, #688]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 8001292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	055b      	lsls	r3, r3, #21
 8001298:	4013      	ands	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800129e:	231f      	movs	r3, #31
 80012a0:	18fb      	adds	r3, r7, r3
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012a6:	4ba8      	ldr	r3, [pc, #672]	; (8001548 <HAL_RCC_OscConfig+0x630>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4013      	ands	r3, r2
 80012b0:	d11a      	bne.n	80012e8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012b2:	4ba5      	ldr	r3, [pc, #660]	; (8001548 <HAL_RCC_OscConfig+0x630>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4ba4      	ldr	r3, [pc, #656]	; (8001548 <HAL_RCC_OscConfig+0x630>)
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	0049      	lsls	r1, r1, #1
 80012bc:	430a      	orrs	r2, r1
 80012be:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fb9c 	bl	80009fc <HAL_GetTick>
 80012c4:	0003      	movs	r3, r0
 80012c6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ca:	f7ff fb97 	bl	80009fc <HAL_GetTick>
 80012ce:	0002      	movs	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e177      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012dc:	4b9a      	ldr	r3, [pc, #616]	; (8001548 <HAL_RCC_OscConfig+0x630>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	4013      	ands	r3, r2
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d106      	bne.n	80012fe <HAL_RCC_OscConfig+0x3e6>
 80012f0:	4b94      	ldr	r3, [pc, #592]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 80012f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012f4:	4b93      	ldr	r3, [pc, #588]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 80012f6:	2101      	movs	r1, #1
 80012f8:	430a      	orrs	r2, r1
 80012fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80012fc:	e01c      	b.n	8001338 <HAL_RCC_OscConfig+0x420>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2b05      	cmp	r3, #5
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0x408>
 8001306:	4b8f      	ldr	r3, [pc, #572]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 8001308:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800130a:	4b8e      	ldr	r3, [pc, #568]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 800130c:	2104      	movs	r1, #4
 800130e:	430a      	orrs	r2, r1
 8001310:	65da      	str	r2, [r3, #92]	; 0x5c
 8001312:	4b8c      	ldr	r3, [pc, #560]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 8001314:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001316:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 8001318:	2101      	movs	r1, #1
 800131a:	430a      	orrs	r2, r1
 800131c:	65da      	str	r2, [r3, #92]	; 0x5c
 800131e:	e00b      	b.n	8001338 <HAL_RCC_OscConfig+0x420>
 8001320:	4b88      	ldr	r3, [pc, #544]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 8001322:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001324:	4b87      	ldr	r3, [pc, #540]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 8001326:	2101      	movs	r1, #1
 8001328:	438a      	bics	r2, r1
 800132a:	65da      	str	r2, [r3, #92]	; 0x5c
 800132c:	4b85      	ldr	r3, [pc, #532]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 800132e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001330:	4b84      	ldr	r3, [pc, #528]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 8001332:	2104      	movs	r1, #4
 8001334:	438a      	bics	r2, r1
 8001336:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d014      	beq.n	800136a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fb5c 	bl	80009fc <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001348:	e009      	b.n	800135e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800134a:	f7ff fb57 	bl	80009fc <HAL_GetTick>
 800134e:	0002      	movs	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	4a7d      	ldr	r2, [pc, #500]	; (800154c <HAL_RCC_OscConfig+0x634>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e136      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800135e:	4b79      	ldr	r3, [pc, #484]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 8001360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001362:	2202      	movs	r2, #2
 8001364:	4013      	ands	r3, r2
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x432>
 8001368:	e013      	b.n	8001392 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136a:	f7ff fb47 	bl	80009fc <HAL_GetTick>
 800136e:	0003      	movs	r3, r0
 8001370:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001372:	e009      	b.n	8001388 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001374:	f7ff fb42 	bl	80009fc <HAL_GetTick>
 8001378:	0002      	movs	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	4a73      	ldr	r2, [pc, #460]	; (800154c <HAL_RCC_OscConfig+0x634>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e121      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001388:	4b6e      	ldr	r3, [pc, #440]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 800138a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138c:	2202      	movs	r2, #2
 800138e:	4013      	ands	r3, r2
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001392:	231f      	movs	r3, #31
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d105      	bne.n	80013a8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800139c:	4b69      	ldr	r3, [pc, #420]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 800139e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013a0:	4b68      	ldr	r3, [pc, #416]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 80013a2:	496b      	ldr	r1, [pc, #428]	; (8001550 <HAL_RCC_OscConfig+0x638>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2220      	movs	r2, #32
 80013ae:	4013      	ands	r3, r2
 80013b0:	d039      	beq.n	8001426 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d01b      	beq.n	80013f2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013ba:	4b62      	ldr	r3, [pc, #392]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b61      	ldr	r3, [pc, #388]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	03c9      	lsls	r1, r1, #15
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fb18 	bl	80009fc <HAL_GetTick>
 80013cc:	0003      	movs	r3, r0
 80013ce:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013d2:	f7ff fb13 	bl	80009fc <HAL_GetTick>
 80013d6:	0002      	movs	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e0f3      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80013e4:	4b57      	ldr	r3, [pc, #348]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	041b      	lsls	r3, r3, #16
 80013ec:	4013      	ands	r3, r2
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x4ba>
 80013f0:	e019      	b.n	8001426 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013f2:	4b54      	ldr	r3, [pc, #336]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b53      	ldr	r3, [pc, #332]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 80013f8:	4956      	ldr	r1, [pc, #344]	; (8001554 <HAL_RCC_OscConfig+0x63c>)
 80013fa:	400a      	ands	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fe:	f7ff fafd 	bl	80009fc <HAL_GetTick>
 8001402:	0003      	movs	r3, r0
 8001404:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001408:	f7ff faf8 	bl	80009fc <HAL_GetTick>
 800140c:	0002      	movs	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e0d8      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800141a:	4b4a      	ldr	r3, [pc, #296]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	041b      	lsls	r3, r3, #16
 8001422:	4013      	ands	r3, r2
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d100      	bne.n	8001430 <HAL_RCC_OscConfig+0x518>
 800142e:	e0cc      	b.n	80015ca <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001430:	4b44      	ldr	r3, [pc, #272]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2238      	movs	r2, #56	; 0x38
 8001436:	4013      	ands	r3, r2
 8001438:	2b10      	cmp	r3, #16
 800143a:	d100      	bne.n	800143e <HAL_RCC_OscConfig+0x526>
 800143c:	e07b      	b.n	8001536 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d156      	bne.n	80014f4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001446:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 800144c:	4942      	ldr	r1, [pc, #264]	; (8001558 <HAL_RCC_OscConfig+0x640>)
 800144e:	400a      	ands	r2, r1
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001452:	f7ff fad3 	bl	80009fc <HAL_GetTick>
 8001456:	0003      	movs	r3, r0
 8001458:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145c:	f7ff face 	bl	80009fc <HAL_GetTick>
 8001460:	0002      	movs	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e0ae      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800146e:	4b35      	ldr	r3, [pc, #212]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	049b      	lsls	r3, r3, #18
 8001476:	4013      	ands	r3, r2
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800147a:	4b32      	ldr	r3, [pc, #200]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	4a37      	ldr	r2, [pc, #220]	; (800155c <HAL_RCC_OscConfig+0x644>)
 8001480:	4013      	ands	r3, r2
 8001482:	0019      	movs	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a6:	431a      	orrs	r2, r3
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 80014aa:	430a      	orrs	r2, r1
 80014ac:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b24      	ldr	r3, [pc, #144]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	0449      	lsls	r1, r1, #17
 80014b8:	430a      	orrs	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	4b20      	ldr	r3, [pc, #128]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	0549      	lsls	r1, r1, #21
 80014c6:	430a      	orrs	r2, r1
 80014c8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ca:	f7ff fa97 	bl	80009fc <HAL_GetTick>
 80014ce:	0003      	movs	r3, r0
 80014d0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d4:	f7ff fa92 	bl	80009fc <HAL_GetTick>
 80014d8:	0002      	movs	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e072      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	049b      	lsls	r3, r3, #18
 80014ee:	4013      	ands	r3, r2
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x5bc>
 80014f2:	e06a      	b.n	80015ca <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 80014fa:	4917      	ldr	r1, [pc, #92]	; (8001558 <HAL_RCC_OscConfig+0x640>)
 80014fc:	400a      	ands	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fa7c 	bl	80009fc <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150a:	f7ff fa77 	bl	80009fc <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e057      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	049b      	lsls	r3, r3, #18
 8001524:	4013      	ands	r3, r2
 8001526:	d1f0      	bne.n	800150a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_RCC_OscConfig+0x62c>)
 800152e:	490c      	ldr	r1, [pc, #48]	; (8001560 <HAL_RCC_OscConfig+0x648>)
 8001530:	400a      	ands	r2, r1
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	e049      	b.n	80015ca <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d112      	bne.n	8001564 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e044      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	40021000 	.word	0x40021000
 8001548:	40007000 	.word	0x40007000
 800154c:	00001388 	.word	0x00001388
 8001550:	efffffff 	.word	0xefffffff
 8001554:	ffbfffff 	.word	0xffbfffff
 8001558:	feffffff 	.word	0xfeffffff
 800155c:	11c1808c 	.word	0x11c1808c
 8001560:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_RCC_OscConfig+0x6bc>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2203      	movs	r2, #3
 800156e:	401a      	ands	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	429a      	cmp	r2, r3
 8001576:	d126      	bne.n	80015c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2270      	movs	r2, #112	; 0x70
 800157c:	401a      	ands	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001582:	429a      	cmp	r2, r3
 8001584:	d11f      	bne.n	80015c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	23fe      	movs	r3, #254	; 0xfe
 800158a:	01db      	lsls	r3, r3, #7
 800158c:	401a      	ands	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001594:	429a      	cmp	r2, r3
 8001596:	d116      	bne.n	80015c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	23f8      	movs	r3, #248	; 0xf8
 800159c:	039b      	lsls	r3, r3, #14
 800159e:	401a      	ands	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d10e      	bne.n	80015c6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	23e0      	movs	r3, #224	; 0xe0
 80015ac:	051b      	lsls	r3, r3, #20
 80015ae:	401a      	ands	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d106      	bne.n	80015c6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	0f5b      	lsrs	r3, r3, #29
 80015bc:	075a      	lsls	r2, r3, #29
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d001      	beq.n	80015ca <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	0018      	movs	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b008      	add	sp, #32
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40021000 	.word	0x40021000

080015d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0e9      	b.n	80017c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015ec:	4b76      	ldr	r3, [pc, #472]	; (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2207      	movs	r2, #7
 80015f2:	4013      	ands	r3, r2
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d91e      	bls.n	8001638 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b73      	ldr	r3, [pc, #460]	; (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2207      	movs	r2, #7
 8001600:	4393      	bics	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	4b70      	ldr	r3, [pc, #448]	; (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800160c:	f7ff f9f6 	bl	80009fc <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001614:	e009      	b.n	800162a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001616:	f7ff f9f1 	bl	80009fc <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	4a6a      	ldr	r2, [pc, #424]	; (80017cc <HAL_RCC_ClockConfig+0x1f4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e0ca      	b.n	80017c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800162a:	4b67      	ldr	r3, [pc, #412]	; (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2207      	movs	r2, #7
 8001630:	4013      	ands	r3, r2
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d1ee      	bne.n	8001616 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2202      	movs	r2, #2
 800163e:	4013      	ands	r3, r2
 8001640:	d015      	beq.n	800166e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2204      	movs	r2, #4
 8001648:	4013      	ands	r3, r2
 800164a:	d006      	beq.n	800165a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800164c:	4b60      	ldr	r3, [pc, #384]	; (80017d0 <HAL_RCC_ClockConfig+0x1f8>)
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	4b5f      	ldr	r3, [pc, #380]	; (80017d0 <HAL_RCC_ClockConfig+0x1f8>)
 8001652:	21e0      	movs	r1, #224	; 0xe0
 8001654:	01c9      	lsls	r1, r1, #7
 8001656:	430a      	orrs	r2, r1
 8001658:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800165a:	4b5d      	ldr	r3, [pc, #372]	; (80017d0 <HAL_RCC_ClockConfig+0x1f8>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	4a5d      	ldr	r2, [pc, #372]	; (80017d4 <HAL_RCC_ClockConfig+0x1fc>)
 8001660:	4013      	ands	r3, r2
 8001662:	0019      	movs	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <HAL_RCC_ClockConfig+0x1f8>)
 800166a:	430a      	orrs	r2, r1
 800166c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2201      	movs	r2, #1
 8001674:	4013      	ands	r3, r2
 8001676:	d057      	beq.n	8001728 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d107      	bne.n	8001690 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001680:	4b53      	ldr	r3, [pc, #332]	; (80017d0 <HAL_RCC_ClockConfig+0x1f8>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	029b      	lsls	r3, r3, #10
 8001688:	4013      	ands	r3, r2
 800168a:	d12b      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e097      	b.n	80017c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d107      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001698:	4b4d      	ldr	r3, [pc, #308]	; (80017d0 <HAL_RCC_ClockConfig+0x1f8>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	049b      	lsls	r3, r3, #18
 80016a0:	4013      	ands	r3, r2
 80016a2:	d11f      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e08b      	b.n	80017c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d107      	bne.n	80016c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b0:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_RCC_ClockConfig+0x1f8>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4013      	ands	r3, r2
 80016ba:	d113      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e07f      	b.n	80017c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016c8:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_RCC_ClockConfig+0x1f8>)
 80016ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016cc:	2202      	movs	r2, #2
 80016ce:	4013      	ands	r3, r2
 80016d0:	d108      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e074      	b.n	80017c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d6:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <HAL_RCC_ClockConfig+0x1f8>)
 80016d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016da:	2202      	movs	r2, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e06d      	b.n	80017c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016e4:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <HAL_RCC_ClockConfig+0x1f8>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2207      	movs	r2, #7
 80016ea:	4393      	bics	r3, r2
 80016ec:	0019      	movs	r1, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <HAL_RCC_ClockConfig+0x1f8>)
 80016f4:	430a      	orrs	r2, r1
 80016f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016f8:	f7ff f980 	bl	80009fc <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001700:	e009      	b.n	8001716 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001702:	f7ff f97b 	bl	80009fc <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	4a2f      	ldr	r2, [pc, #188]	; (80017cc <HAL_RCC_ClockConfig+0x1f4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e054      	b.n	80017c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <HAL_RCC_ClockConfig+0x1f8>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2238      	movs	r2, #56	; 0x38
 800171c:	401a      	ands	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	429a      	cmp	r2, r3
 8001726:	d1ec      	bne.n	8001702 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001728:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2207      	movs	r2, #7
 800172e:	4013      	ands	r3, r2
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d21e      	bcs.n	8001774 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2207      	movs	r2, #7
 800173c:	4393      	bics	r3, r2
 800173e:	0019      	movs	r1, r3
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001748:	f7ff f958 	bl	80009fc <HAL_GetTick>
 800174c:	0003      	movs	r3, r0
 800174e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001750:	e009      	b.n	8001766 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001752:	f7ff f953 	bl	80009fc <HAL_GetTick>
 8001756:	0002      	movs	r2, r0
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <HAL_RCC_ClockConfig+0x1f4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e02c      	b.n	80017c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2207      	movs	r2, #7
 800176c:	4013      	ands	r3, r2
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d1ee      	bne.n	8001752 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2204      	movs	r2, #4
 800177a:	4013      	ands	r3, r2
 800177c:	d009      	beq.n	8001792 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <HAL_RCC_ClockConfig+0x1f8>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <HAL_RCC_ClockConfig+0x200>)
 8001784:	4013      	ands	r3, r2
 8001786:	0019      	movs	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_RCC_ClockConfig+0x1f8>)
 800178e:	430a      	orrs	r2, r1
 8001790:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001792:	f000 f829 	bl	80017e8 <HAL_RCC_GetSysClockFreq>
 8001796:	0001      	movs	r1, r0
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_RCC_ClockConfig+0x1f8>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	220f      	movs	r2, #15
 80017a0:	401a      	ands	r2, r3
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_RCC_ClockConfig+0x204>)
 80017a4:	0092      	lsls	r2, r2, #2
 80017a6:	58d3      	ldr	r3, [r2, r3]
 80017a8:	221f      	movs	r2, #31
 80017aa:	4013      	ands	r3, r2
 80017ac:	000a      	movs	r2, r1
 80017ae:	40da      	lsrs	r2, r3
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_RCC_ClockConfig+0x208>)
 80017b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_RCC_ClockConfig+0x20c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff f8c3 	bl	8000944 <HAL_InitTick>
 80017be:	0003      	movs	r3, r0
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b004      	add	sp, #16
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40022000 	.word	0x40022000
 80017cc:	00001388 	.word	0x00001388
 80017d0:	40021000 	.word	0x40021000
 80017d4:	fffff0ff 	.word	0xfffff0ff
 80017d8:	ffff8fff 	.word	0xffff8fff
 80017dc:	080020b0 	.word	0x080020b0
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000004 	.word	0x20000004

080017e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ee:	4b3c      	ldr	r3, [pc, #240]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2238      	movs	r2, #56	; 0x38
 80017f4:	4013      	ands	r3, r2
 80017f6:	d10f      	bne.n	8001818 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80017f8:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	0adb      	lsrs	r3, r3, #11
 80017fe:	2207      	movs	r2, #7
 8001800:	4013      	ands	r3, r2
 8001802:	2201      	movs	r2, #1
 8001804:	409a      	lsls	r2, r3
 8001806:	0013      	movs	r3, r2
 8001808:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800180a:	6839      	ldr	r1, [r7, #0]
 800180c:	4835      	ldr	r0, [pc, #212]	; (80018e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800180e:	f7fe fc79 	bl	8000104 <__udivsi3>
 8001812:	0003      	movs	r3, r0
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	e05d      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001818:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2238      	movs	r2, #56	; 0x38
 800181e:	4013      	ands	r3, r2
 8001820:	2b08      	cmp	r3, #8
 8001822:	d102      	bne.n	800182a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001824:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	e054      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182a:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2238      	movs	r2, #56	; 0x38
 8001830:	4013      	ands	r3, r2
 8001832:	2b10      	cmp	r3, #16
 8001834:	d138      	bne.n	80018a8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2203      	movs	r2, #3
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001840:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	2207      	movs	r2, #7
 8001848:	4013      	ands	r3, r2
 800184a:	3301      	adds	r3, #1
 800184c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d10d      	bne.n	8001870 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	4824      	ldr	r0, [pc, #144]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001858:	f7fe fc54 	bl	8000104 <__udivsi3>
 800185c:	0003      	movs	r3, r0
 800185e:	0019      	movs	r1, r3
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	227f      	movs	r2, #127	; 0x7f
 8001868:	4013      	ands	r3, r2
 800186a:	434b      	muls	r3, r1
 800186c:	617b      	str	r3, [r7, #20]
        break;
 800186e:	e00d      	b.n	800188c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	481c      	ldr	r0, [pc, #112]	; (80018e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001874:	f7fe fc46 	bl	8000104 <__udivsi3>
 8001878:	0003      	movs	r3, r0
 800187a:	0019      	movs	r1, r3
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	227f      	movs	r2, #127	; 0x7f
 8001884:	4013      	ands	r3, r2
 8001886:	434b      	muls	r3, r1
 8001888:	617b      	str	r3, [r7, #20]
        break;
 800188a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	0f5b      	lsrs	r3, r3, #29
 8001892:	2207      	movs	r2, #7
 8001894:	4013      	ands	r3, r2
 8001896:	3301      	adds	r3, #1
 8001898:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	6978      	ldr	r0, [r7, #20]
 800189e:	f7fe fc31 	bl	8000104 <__udivsi3>
 80018a2:	0003      	movs	r3, r0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	e015      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018a8:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2238      	movs	r2, #56	; 0x38
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b20      	cmp	r3, #32
 80018b2:	d103      	bne.n	80018bc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2238      	movs	r2, #56	; 0x38
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b18      	cmp	r3, #24
 80018c6:	d103      	bne.n	80018d0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80018c8:	23fa      	movs	r3, #250	; 0xfa
 80018ca:	01db      	lsls	r3, r3, #7
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	e001      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80018d4:	693b      	ldr	r3, [r7, #16]
}
 80018d6:	0018      	movs	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	b006      	add	sp, #24
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	40021000 	.word	0x40021000
 80018e4:	00f42400 	.word	0x00f42400
 80018e8:	007a1200 	.word	0x007a1200

080018ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0a8      	b.n	8001a50 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	2382      	movs	r3, #130	; 0x82
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	429a      	cmp	r2, r3
 8001910:	d009      	beq.n	8001926 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	61da      	str	r2, [r3, #28]
 8001918:	e005      	b.n	8001926 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	225d      	movs	r2, #93	; 0x5d
 8001930:	5c9b      	ldrb	r3, [r3, r2]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d107      	bne.n	8001948 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	225c      	movs	r2, #92	; 0x5c
 800193c:	2100      	movs	r1, #0
 800193e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	0018      	movs	r0, r3
 8001944:	f7fe fefe 	bl	8000744 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	225d      	movs	r2, #93	; 0x5d
 800194c:	2102      	movs	r1, #2
 800194e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2140      	movs	r1, #64	; 0x40
 800195c:	438a      	bics	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	23e0      	movs	r3, #224	; 0xe0
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	429a      	cmp	r2, r3
 800196a:	d902      	bls.n	8001972 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	e002      	b.n	8001978 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	015b      	lsls	r3, r3, #5
 8001976:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	23f0      	movs	r3, #240	; 0xf0
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	429a      	cmp	r2, r3
 8001982:	d008      	beq.n	8001996 <HAL_SPI_Init+0xaa>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	23e0      	movs	r3, #224	; 0xe0
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	429a      	cmp	r2, r3
 800198e:	d002      	beq.n	8001996 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	2382      	movs	r3, #130	; 0x82
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	401a      	ands	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6899      	ldr	r1, [r3, #8]
 80019a4:	2384      	movs	r3, #132	; 0x84
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	400b      	ands	r3, r1
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	2102      	movs	r1, #2
 80019b2:	400b      	ands	r3, r1
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	2101      	movs	r1, #1
 80019bc:	400b      	ands	r3, r1
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6999      	ldr	r1, [r3, #24]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	400b      	ands	r3, r1
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	2138      	movs	r1, #56	; 0x38
 80019d2:	400b      	ands	r3, r1
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	400b      	ands	r3, r1
 80019de:	431a      	orrs	r2, r3
 80019e0:	0011      	movs	r1, r2
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	019b      	lsls	r3, r3, #6
 80019ea:	401a      	ands	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	0c1b      	lsrs	r3, r3, #16
 80019fa:	2204      	movs	r2, #4
 80019fc:	401a      	ands	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	2110      	movs	r1, #16
 8001a04:	400b      	ands	r3, r1
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0c:	2108      	movs	r1, #8
 8001a0e:	400b      	ands	r3, r1
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68d9      	ldr	r1, [r3, #12]
 8001a16:	23f0      	movs	r3, #240	; 0xf0
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	400b      	ands	r3, r1
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	0011      	movs	r1, r2
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	015b      	lsls	r3, r3, #5
 8001a26:	401a      	ands	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	69da      	ldr	r2, [r3, #28]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4907      	ldr	r1, [pc, #28]	; (8001a58 <HAL_SPI_Init+0x16c>)
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	225d      	movs	r2, #93	; 0x5d
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b004      	add	sp, #16
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	fffff7ff 	.word	0xfffff7ff

08001a5c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	1dbb      	adds	r3, r7, #6
 8001a6a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a6c:	231f      	movs	r3, #31
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	225c      	movs	r2, #92	; 0x5c
 8001a78:	5c9b      	ldrb	r3, [r3, r2]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_SPI_Transmit+0x26>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e147      	b.n	8001d12 <HAL_SPI_Transmit+0x2b6>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	225c      	movs	r2, #92	; 0x5c
 8001a86:	2101      	movs	r1, #1
 8001a88:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a8a:	f7fe ffb7 	bl	80009fc <HAL_GetTick>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001a92:	2316      	movs	r3, #22
 8001a94:	18fb      	adds	r3, r7, r3
 8001a96:	1dba      	adds	r2, r7, #6
 8001a98:	8812      	ldrh	r2, [r2, #0]
 8001a9a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	225d      	movs	r2, #93	; 0x5d
 8001aa0:	5c9b      	ldrb	r3, [r3, r2]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d004      	beq.n	8001ab2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001aa8:	231f      	movs	r3, #31
 8001aaa:	18fb      	adds	r3, r7, r3
 8001aac:	2202      	movs	r2, #2
 8001aae:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ab0:	e128      	b.n	8001d04 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_SPI_Transmit+0x64>
 8001ab8:	1dbb      	adds	r3, r7, #6
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d104      	bne.n	8001aca <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001ac0:	231f      	movs	r3, #31
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ac8:	e11c      	b.n	8001d04 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	225d      	movs	r2, #93	; 0x5d
 8001ace:	2103      	movs	r1, #3
 8001ad0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1dba      	adds	r2, r7, #6
 8001ae2:	8812      	ldrh	r2, [r2, #0]
 8001ae4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1dba      	adds	r2, r7, #6
 8001aea:	8812      	ldrh	r2, [r2, #0]
 8001aec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2244      	movs	r2, #68	; 0x44
 8001af8:	2100      	movs	r1, #0
 8001afa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2246      	movs	r2, #70	; 0x46
 8001b00:	2100      	movs	r1, #0
 8001b02:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d110      	bne.n	8001b3e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2140      	movs	r1, #64	; 0x40
 8001b28:	438a      	bics	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2180      	movs	r1, #128	; 0x80
 8001b38:	01c9      	lsls	r1, r1, #7
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2240      	movs	r2, #64	; 0x40
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b40      	cmp	r3, #64	; 0x40
 8001b4a:	d007      	beq.n	8001b5c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2140      	movs	r1, #64	; 0x40
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	23e0      	movs	r3, #224	; 0xe0
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d952      	bls.n	8001c0e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d004      	beq.n	8001b7a <HAL_SPI_Transmit+0x11e>
 8001b70:	2316      	movs	r3, #22
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d143      	bne.n	8001c02 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7e:	881a      	ldrh	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8a:	1c9a      	adds	r2, r3, #2
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b9e:	e030      	b.n	8001c02 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d112      	bne.n	8001bd4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb2:	881a      	ldrh	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbe:	1c9a      	adds	r2, r3, #2
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001bd2:	e016      	b.n	8001c02 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bd4:	f7fe ff12 	bl	80009fc <HAL_GetTick>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d802      	bhi.n	8001bea <HAL_SPI_Transmit+0x18e>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	d102      	bne.n	8001bf0 <HAL_SPI_Transmit+0x194>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d108      	bne.n	8001c02 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001bf0:	231f      	movs	r3, #31
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	225d      	movs	r2, #93	; 0x5d
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	5499      	strb	r1, [r3, r2]
          goto error;
 8001c00:	e080      	b.n	8001d04 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1c9      	bne.n	8001ba0 <HAL_SPI_Transmit+0x144>
 8001c0c:	e053      	b.n	8001cb6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d004      	beq.n	8001c20 <HAL_SPI_Transmit+0x1c4>
 8001c16:	2316      	movs	r3, #22
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d145      	bne.n	8001cac <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	330c      	adds	r3, #12
 8001c2a:	7812      	ldrb	r2, [r2, #0]
 8001c2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001c46:	e031      	b.n	8001cac <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d113      	bne.n	8001c7e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	7812      	ldrb	r2, [r2, #0]
 8001c62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c7c:	e016      	b.n	8001cac <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c7e:	f7fe febd 	bl	80009fc <HAL_GetTick>
 8001c82:	0002      	movs	r2, r0
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d802      	bhi.n	8001c94 <HAL_SPI_Transmit+0x238>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	d102      	bne.n	8001c9a <HAL_SPI_Transmit+0x23e>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d108      	bne.n	8001cac <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001c9a:	231f      	movs	r3, #31
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	225d      	movs	r2, #93	; 0x5d
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	5499      	strb	r1, [r3, r2]
          goto error;
 8001caa:	e02b      	b.n	8001d04 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1c8      	bne.n	8001c48 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	6839      	ldr	r1, [r7, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f000 f95d 	bl	8001f7c <SPI_EndRxTxTransaction>
 8001cc2:	1e03      	subs	r3, r0, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10a      	bne.n	8001cea <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d004      	beq.n	8001cfc <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001cf2:	231f      	movs	r3, #31
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
 8001cfa:	e003      	b.n	8001d04 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	225d      	movs	r2, #93	; 0x5d
 8001d00:	2101      	movs	r1, #1
 8001d02:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	225c      	movs	r2, #92	; 0x5c
 8001d08:	2100      	movs	r1, #0
 8001d0a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001d0c:	231f      	movs	r3, #31
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	781b      	ldrb	r3, [r3, #0]
}
 8001d12:	0018      	movs	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b008      	add	sp, #32
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	1dfb      	adds	r3, r7, #7
 8001d2a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d2c:	f7fe fe66 	bl	80009fc <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	18d3      	adds	r3, r2, r3
 8001d3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d3c:	f7fe fe5e 	bl	80009fc <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d44:	4b3a      	ldr	r3, [pc, #232]	; (8001e30 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	015b      	lsls	r3, r3, #5
 8001d4a:	0d1b      	lsrs	r3, r3, #20
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	4353      	muls	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d52:	e058      	b.n	8001e06 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	3301      	adds	r3, #1
 8001d58:	d055      	beq.n	8001e06 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d5a:	f7fe fe4f 	bl	80009fc <HAL_GetTick>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d902      	bls.n	8001d70 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d142      	bne.n	8001df6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	21e0      	movs	r1, #224	; 0xe0
 8001d7c:	438a      	bics	r2, r1
 8001d7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	2382      	movs	r3, #130	; 0x82
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d113      	bne.n	8001db4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d005      	beq.n	8001da4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d107      	bne.n	8001db4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2140      	movs	r1, #64	; 0x40
 8001db0:	438a      	bics	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	019b      	lsls	r3, r3, #6
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d110      	bne.n	8001de2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	491a      	ldr	r1, [pc, #104]	; (8001e34 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	0189      	lsls	r1, r1, #6
 8001dde:	430a      	orrs	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	225d      	movs	r2, #93	; 0x5d
 8001de6:	2101      	movs	r1, #1
 8001de8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	225c      	movs	r2, #92	; 0x5c
 8001dee:	2100      	movs	r1, #0
 8001df0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e017      	b.n	8001e26 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	425a      	negs	r2, r3
 8001e16:	4153      	adcs	r3, r2
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	001a      	movs	r2, r3
 8001e1c:	1dfb      	adds	r3, r7, #7
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d197      	bne.n	8001d54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b008      	add	sp, #32
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	20000000 	.word	0x20000000
 8001e34:	ffffdfff 	.word	0xffffdfff

08001e38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001e46:	2317      	movs	r3, #23
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001e4e:	f7fe fdd5 	bl	80009fc <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	18d3      	adds	r3, r2, r3
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8001e5e:	f7fe fdcd 	bl	80009fc <HAL_GetTick>
 8001e62:	0003      	movs	r3, r0
 8001e64:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	330c      	adds	r3, #12
 8001e6c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001e6e:	4b41      	ldr	r3, [pc, #260]	; (8001f74 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	0013      	movs	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	189b      	adds	r3, r3, r2
 8001e78:	00da      	lsls	r2, r3, #3
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	0d1b      	lsrs	r3, r3, #20
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e80:	4353      	muls	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001e84:	e068      	b.n	8001f58 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	23c0      	movs	r3, #192	; 0xc0
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d10a      	bne.n	8001ea6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d107      	bne.n	8001ea6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	2117      	movs	r1, #23
 8001e9e:	187b      	adds	r3, r7, r1
 8001ea0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	d055      	beq.n	8001f58 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001eac:	f7fe fda6 	bl	80009fc <HAL_GetTick>
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d902      	bls.n	8001ec2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d142      	bne.n	8001f48 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	21e0      	movs	r1, #224	; 0xe0
 8001ece:	438a      	bics	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	2382      	movs	r3, #130	; 0x82
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d113      	bne.n	8001f06 <SPI_WaitFifoStateUntilTimeout+0xce>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d005      	beq.n	8001ef6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d107      	bne.n	8001f06 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2140      	movs	r1, #64	; 0x40
 8001f02:	438a      	bics	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	019b      	lsls	r3, r3, #6
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d110      	bne.n	8001f34 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4916      	ldr	r1, [pc, #88]	; (8001f78 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8001f1e:	400a      	ands	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	0189      	lsls	r1, r1, #6
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	225d      	movs	r2, #93	; 0x5d
 8001f38:	2101      	movs	r1, #1
 8001f3a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	225c      	movs	r2, #92	; 0x5c
 8001f40:	2100      	movs	r1, #0
 8001f42:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e010      	b.n	8001f6a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	4013      	ands	r3, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d18e      	bne.n	8001e86 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b00a      	add	sp, #40	; 0x28
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	20000000 	.word	0x20000000
 8001f78:	ffffdfff 	.word	0xffffdfff

08001f7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	23c0      	movs	r3, #192	; 0xc0
 8001f8c:	0159      	lsls	r1, r3, #5
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	0013      	movs	r3, r2
 8001f96:	2200      	movs	r2, #0
 8001f98:	f7ff ff4e 	bl	8001e38 <SPI_WaitFifoStateUntilTimeout>
 8001f9c:	1e03      	subs	r3, r0, #0
 8001f9e:	d007      	beq.n	8001fb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e027      	b.n	8002000 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	0013      	movs	r3, r2
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2180      	movs	r1, #128	; 0x80
 8001fbe:	f7ff fead 	bl	8001d1c <SPI_WaitFlagStateUntilTimeout>
 8001fc2:	1e03      	subs	r3, r0, #0
 8001fc4:	d007      	beq.n	8001fd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fca:	2220      	movs	r2, #32
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e014      	b.n	8002000 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	23c0      	movs	r3, #192	; 0xc0
 8001fda:	00d9      	lsls	r1, r3, #3
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	0013      	movs	r3, r2
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f7ff ff27 	bl	8001e38 <SPI_WaitFifoStateUntilTimeout>
 8001fea:	1e03      	subs	r3, r0, #0
 8001fec:	d007      	beq.n	8001ffe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e000      	b.n	8002000 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b004      	add	sp, #16
 8002006:	bd80      	pop	{r7, pc}

08002008 <__libc_init_array>:
 8002008:	b570      	push	{r4, r5, r6, lr}
 800200a:	2600      	movs	r6, #0
 800200c:	4d0c      	ldr	r5, [pc, #48]	; (8002040 <__libc_init_array+0x38>)
 800200e:	4c0d      	ldr	r4, [pc, #52]	; (8002044 <__libc_init_array+0x3c>)
 8002010:	1b64      	subs	r4, r4, r5
 8002012:	10a4      	asrs	r4, r4, #2
 8002014:	42a6      	cmp	r6, r4
 8002016:	d109      	bne.n	800202c <__libc_init_array+0x24>
 8002018:	2600      	movs	r6, #0
 800201a:	f000 f821 	bl	8002060 <_init>
 800201e:	4d0a      	ldr	r5, [pc, #40]	; (8002048 <__libc_init_array+0x40>)
 8002020:	4c0a      	ldr	r4, [pc, #40]	; (800204c <__libc_init_array+0x44>)
 8002022:	1b64      	subs	r4, r4, r5
 8002024:	10a4      	asrs	r4, r4, #2
 8002026:	42a6      	cmp	r6, r4
 8002028:	d105      	bne.n	8002036 <__libc_init_array+0x2e>
 800202a:	bd70      	pop	{r4, r5, r6, pc}
 800202c:	00b3      	lsls	r3, r6, #2
 800202e:	58eb      	ldr	r3, [r5, r3]
 8002030:	4798      	blx	r3
 8002032:	3601      	adds	r6, #1
 8002034:	e7ee      	b.n	8002014 <__libc_init_array+0xc>
 8002036:	00b3      	lsls	r3, r6, #2
 8002038:	58eb      	ldr	r3, [r5, r3]
 800203a:	4798      	blx	r3
 800203c:	3601      	adds	r6, #1
 800203e:	e7f2      	b.n	8002026 <__libc_init_array+0x1e>
 8002040:	080020f0 	.word	0x080020f0
 8002044:	080020f0 	.word	0x080020f0
 8002048:	080020f0 	.word	0x080020f0
 800204c:	080020f4 	.word	0x080020f4

08002050 <memset>:
 8002050:	0003      	movs	r3, r0
 8002052:	1882      	adds	r2, r0, r2
 8002054:	4293      	cmp	r3, r2
 8002056:	d100      	bne.n	800205a <memset+0xa>
 8002058:	4770      	bx	lr
 800205a:	7019      	strb	r1, [r3, #0]
 800205c:	3301      	adds	r3, #1
 800205e:	e7f9      	b.n	8002054 <memset+0x4>

08002060 <_init>:
 8002060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002066:	bc08      	pop	{r3}
 8002068:	469e      	mov	lr, r3
 800206a:	4770      	bx	lr

0800206c <_fini>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002072:	bc08      	pop	{r3}
 8002074:	469e      	mov	lr, r3
 8002076:	4770      	bx	lr
